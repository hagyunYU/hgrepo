
mart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  00000f36  00000fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001a6  008001a6  00001070  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010df  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095f  00000000  00000000  0000225f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000071c  00000000  00000000  00002bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000571  00000000  00000000  00003414  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce6  00000000  00000000  00003985  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000466b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c1       	rjmp	.+676    	; 0x2e6 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e3       	ldi	r30, 0x36	; 54
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 3a       	cpi	r26, 0xA6	; 166
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 ea       	ldi	r26, 0xA6	; 166
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 3b       	cpi	r26, 0xB0	; 176
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6c d1       	rcall	.+728    	; 0x39c <main>
  c4:	36 c7       	rjmp	.+3692   	; 0xf32 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z10init_PORTCv>:
#define ENABLE  (PORTC |= 0x04)
#define DISABLE (PORTC &= 0xFB)

void init_PORTC(void)
{
  DDRC = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 bb       	out	0x14, r24	; 20
  PORTC = 0xFF;
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	08 95       	ret

000000d0 <_Z14instrction_outh>:
}
 
void instrction_out(unsigned char b)
{
	PORTC = b&0xF0;
  d0:	98 2f       	mov	r25, r24
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	95 bb       	out	0x15, r25	; 21
	ENABLE;
  d6:	aa 9a       	sbi	0x15, 2	; 21
	DISABLE;
  d8:	aa 98       	cbi	0x15, 2	; 21
	PORTC=((b<<4)&0xF0);
  da:	20 e1       	ldi	r18, 0x10	; 16
  dc:	82 9f       	mul	r24, r18
  de:	c0 01       	movw	r24, r0
  e0:	11 24       	eor	r1, r1
  e2:	85 bb       	out	0x15, r24	; 21
	ENABLE;
  e4:	aa 9a       	sbi	0x15, 2	; 21
	DISABLE;
  e6:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	9f e1       	ldi	r25, 0x1F	; 31
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <_Z14instrction_outh+0x1c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_Z14instrction_outh+0x22>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <_Z8char_outh>:
	_delay_ms(2);
}
void char_out(unsigned char b)
{
	PORTC=(b&0xF0)|0x01;
  f6:	98 2f       	mov	r25, r24
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	91 60       	ori	r25, 0x01	; 1
  fc:	95 bb       	out	0x15, r25	; 21
	ENABLE;
  fe:	aa 9a       	sbi	0x15, 2	; 21
	DISABLE;
 100:	aa 98       	cbi	0x15, 2	; 21
	PORTC=((b<<4)&0xF0)|0x01;
 102:	20 e1       	ldi	r18, 0x10	; 16
 104:	82 9f       	mul	r24, r18
 106:	c0 01       	movw	r24, r0
 108:	11 24       	eor	r1, r1
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	85 bb       	out	0x15, r24	; 21
	ENABLE;
 10e:	aa 9a       	sbi	0x15, 2	; 21
	DISABLE;
 110:	aa 98       	cbi	0x15, 2	; 21
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9f e1       	ldi	r25, 0x1F	; 31
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <_Z8char_outh+0x20>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_Z8char_outh+0x26>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <_Z10lcd_gotoxyhh>:
}
void lcd_gotoxy(unsigned char x, unsigned char y)
{
	// 16 * 2 Character LCD  
	//  Busy();
	switch(y)
 120:	66 23       	and	r22, r22
 122:	19 f0       	breq	.+6      	; 0x12a <_Z10lcd_gotoxyhh+0xa>
 124:	61 30       	cpi	r22, 0x01	; 1
 126:	21 f0       	breq	.+8      	; 0x130 <_Z10lcd_gotoxyhh+0x10>
 128:	08 95       	ret
	{
	    case 0 : instrction_out(0x80+x); break;
 12a:	80 58       	subi	r24, 0x80	; 128
 12c:	d1 cf       	rjmp	.-94     	; 0xd0 <_Z14instrction_outh>
 12e:	08 95       	ret
	    case 1 : instrction_out(0xC0+x); break;
 130:	80 54       	subi	r24, 0x40	; 64
 132:	ce cf       	rjmp	.-100    	; 0xd0 <_Z14instrction_outh>
 134:	08 95       	ret

00000136 <_Z9lcd_putsfhhPh>:
	}
}
void lcd_putsf(unsigned char x, unsigned char y, unsigned char *str)
{
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	04 2f       	mov	r16, r20
 140:	15 2f       	mov	r17, r21
	unsigned int i=0;
	lcd_gotoxy(x,y);
 142:	ee df       	rcall	.-36     	; 0x120 <_Z10lcd_gotoxyhh>
 144:	c0 2f       	mov	r28, r16
 146:	d1 2f       	mov	r29, r17
	do
	{
		char_out(str[i]);
 148:	89 91       	ld	r24, Y+
 14a:	d5 df       	rcall	.-86     	; 0xf6 <_Z8char_outh>
}
void lcd_putsf(unsigned char x, unsigned char y, unsigned char *str)
{
	unsigned int i=0;
	lcd_gotoxy(x,y);
	do
 14c:	88 81       	ld	r24, Y
 14e:	81 11       	cpse	r24, r1
 150:	fb cf       	rjmp	.-10     	; 0x148 <_Z9lcd_putsfhhPh+0x12>
	{
		char_out(str[i]);
	}
	while(str[++i]!='\0');
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <_Z8lcd_initv>:
void lcd_init(void)
{
	init_PORTC();
 15c:	b5 df       	rcall	.-150    	; 0xc8 <_Z10init_PORTCv>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	83 ec       	ldi	r24, 0xC3	; 195
 162:	99 e0       	ldi	r25, 0x09	; 9
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <_Z8lcd_initv+0x8>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <_Z8lcd_initv+0x12>
 16e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	8f e5       	ldi	r24, 0x5F	; 95
 172:	99 e0       	ldi	r25, 0x09	; 9
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <_Z8lcd_initv+0x18>
 178:	00 c0       	rjmp	.+0      	; 0x17a <_Z8lcd_initv+0x1e>
 17a:	00 00       	nop
	_delay_ms(200);
	_delay_us(600);
	instrction_out(0x28);
 17c:	88 e2       	ldi	r24, 0x28	; 40
 17e:	a8 df       	rcall	.-176    	; 0xd0 <_Z14instrction_outh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	9f ef       	ldi	r25, 0xFF	; 255
 182:	23 ec       	ldi	r18, 0xC3	; 195
 184:	89 e0       	ldi	r24, 0x09	; 9
 186:	91 50       	subi	r25, 0x01	; 1
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <_Z8lcd_initv+0x2a>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <_Z8lcd_initv+0x34>
	_delay_ms(200);
	instrction_out(0x28);
 190:	00 00       	nop
 192:	88 e2       	ldi	r24, 0x28	; 40
 194:	9d df       	rcall	.-198    	; 0xd0 <_Z14instrction_outh>
 196:	9f ef       	ldi	r25, 0xFF	; 255
 198:	23 ec       	ldi	r18, 0xC3	; 195
 19a:	89 e0       	ldi	r24, 0x09	; 9
 19c:	91 50       	subi	r25, 0x01	; 1
 19e:	20 40       	sbci	r18, 0x00	; 0
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <_Z8lcd_initv+0x40>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <_Z8lcd_initv+0x4a>
	_delay_ms(200);
	instrction_out(0x0C);
 1a6:	00 00       	nop
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
	instrction_out(0x06);
 1aa:	92 df       	rcall	.-220    	; 0xd0 <_Z14instrction_outh>
 1ac:	86 e0       	ldi	r24, 0x06	; 6
	instrction_out(0x02);
 1ae:	90 df       	rcall	.-224    	; 0xd0 <_Z14instrction_outh>
 1b0:	82 e0       	ldi	r24, 0x02	; 2
	instrction_out(0x01);
 1b2:	8e df       	rcall	.-228    	; 0xd0 <_Z14instrction_outh>
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	8c df       	rcall	.-232    	; 0xd0 <_Z14instrction_outh>
	instrction_out(0x01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	8a cf       	rjmp	.-236    	; 0xd0 <_Z14instrction_outh>
 1bc:	08 95       	ret

000001be <_Z9lcd_clearv>:
 1be:	81 e0       	ldi	r24, 0x01	; 1
}
void lcd_clear(void)
{
	instrction_out(0x01);
 1c0:	87 df       	rcall	.-242    	; 0xd0 <_Z14instrction_outh>
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	9c e9       	ldi	r25, 0x9C	; 156
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <_Z9lcd_clearv+0x8>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_Z9lcd_clearv+0xe>
 1cc:	00 00       	nop
 1ce:	08 95       	ret

000001d0 <_Z6getKeyv>:
#define KEY_ENTER 125

unsigned char getKey()
{
	unsigned char key = 0;
	for (int i=0; i<4; i++)
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
	{
		PORTD = ~(0x00 | (1 << i));
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	ca 01       	movw	r24, r20
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <_Z6getKeyv+0x12>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <_Z6getKeyv+0xe>
 1e6:	80 95       	com	r24
 1e8:	82 bb       	out	0x12, r24	; 18
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	9e e4       	ldi	r25, 0x4E	; 78
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <_Z6getKeyv+0x1e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <_Z6getKeyv+0x24>
 1f4:	00 00       	nop
		_delay_ms(5);
		key = ~PIND & 0xf0;
 1f6:	80 b3       	in	r24, 0x10	; 16
		if (key) return PIND;
 1f8:	80 95       	com	r24
 1fa:	80 7f       	andi	r24, 0xF0	; 240
 1fc:	11 f0       	breq	.+4      	; 0x202 <_Z6getKeyv+0x32>
 1fe:	80 b3       	in	r24, 0x10	; 16
 200:	08 95       	ret
#define KEY_ENTER 125

unsigned char getKey()
{
	unsigned char key = 0;
	for (int i=0; i<4; i++)
 202:	2f 5f       	subi	r18, 0xFF	; 255
 204:	3f 4f       	sbci	r19, 0xFF	; 255
 206:	24 30       	cpi	r18, 0x04	; 4
 208:	31 05       	cpc	r19, r1
 20a:	31 f7       	brne	.-52     	; 0x1d8 <_Z6getKeyv+0x8>
		PORTD = ~(0x00 | (1 << i));
		_delay_ms(5);
		key = ~PIND & 0xf0;
		if (key) return PIND;
	}
	return 0;
 20c:	80 e0       	ldi	r24, 0x00	; 0
}
 20e:	08 95       	ret

00000210 <_Z10initSystemv>:

void initSystem()
{
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
	// Register Setting
	DDRA = 0xff;	// 0,1 : Motor | 5,6,7 : RGY LED
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x0f;	// 0,1,2,3 : Row 0, 1, 2, 3 | 4,5,6,7 : Col 4, 5, 6, 7
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	81 bb       	out	0x11, r24	; 17
	TIMSK = 0x01;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0x07;	// 1024분주
 222:	87 e0       	ldi	r24, 0x07	; 7
 224:	83 bf       	out	0x33, r24	; 51
	
	lcd_init();
 226:	9a df       	rcall	.-204    	; 0x15c <_Z8lcd_initv>
	lcd_clear();
 228:	ca df       	rcall	.-108    	; 0x1be <_Z9lcd_clearv>
 22a:	c2 e0       	ldi	r28, 0x02	; 2
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	10 ee       	ldi	r17, 0xE0	; 224
		lcd_putsf(0,0,(unsigned char *)"     MARKET     ");
		lcd_putsf(0,1,(unsigned char *)"     SYSTEM     ");
		PORTA = 0b00000000;
		_delay_ms(100);
		lcd_clear();
		PORTA = 0b11100000;
 230:	40 e0       	ldi	r20, 0x00	; 0
	
	lcd_init();
	lcd_clear();
	for (int i=0; i<2; i++)
	{
		lcd_putsf(0,0,(unsigned char *)"     MARKET     ");
 232:	51 e0       	ldi	r21, 0x01	; 1
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	7e df       	rcall	.-260    	; 0x136 <_Z9lcd_putsfhhPh>
 23a:	41 e1       	ldi	r20, 0x11	; 17
		lcd_putsf(0,1,(unsigned char *)"     SYSTEM     ");
 23c:	51 e0       	ldi	r21, 0x01	; 1
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	79 df       	rcall	.-270    	; 0x136 <_Z9lcd_putsfhhPh>
 244:	1b ba       	out	0x1b, r1	; 27
		PORTA = 0b00000000;
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	81 ee       	ldi	r24, 0xE1	; 225
 24a:	94 e0       	ldi	r25, 0x04	; 4
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <_Z10initSystemv+0x3c>
 254:	00 c0       	rjmp	.+0      	; 0x256 <_Z10initSystemv+0x46>
 256:	00 00       	nop
		_delay_ms(100);
		lcd_clear();
 258:	b2 df       	rcall	.-156    	; 0x1be <_Z9lcd_clearv>
 25a:	1b bb       	out	0x1b, r17	; 27
		PORTA = 0b11100000;
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	81 ee       	ldi	r24, 0xE1	; 225
 260:	94 e0       	ldi	r25, 0x04	; 4
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <_Z10initSystemv+0x52>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <_Z10initSystemv+0x5c>
 26c:	00 00       	nop
 26e:	21 97       	sbiw	r28, 0x01	; 1
 270:	f9 f6       	brne	.-66     	; 0x230 <_Z10initSystemv+0x20>
	TIMSK = 0x01;
	TCCR0 = 0x07;	// 1024분주
	
	lcd_init();
	lcd_clear();
	for (int i=0; i<2; i++)
 272:	78 94       	sei
		_delay_ms(100);
		lcd_clear();
		PORTA = 0b11100000;
		_delay_ms(100);
	}
	sei();	// Global Interrupt Enable
 274:	df 91       	pop	r29
}
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	08 95       	ret

0000027c <_Z12DisplayClockjjj>:
 27c:	0f 93       	push	r16

void DisplayClock(unsigned int hou, unsigned int min, unsigned sec)
{
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	60 97       	sbiw	r28, 0x10	; 16
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
	char str[16];
	sprintf(str,"    %02d:%02d:%02d",hou,min,sec);
 294:	5f 93       	push	r21
 296:	4f 93       	push	r20
 298:	7f 93       	push	r23
 29a:	6f 93       	push	r22
 29c:	9f 93       	push	r25
 29e:	8f 93       	push	r24
 2a0:	82 e2       	ldi	r24, 0x22	; 34
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	9f 93       	push	r25
 2a6:	8f 93       	push	r24
 2a8:	8e 01       	movw	r16, r28
 2aa:	0f 5f       	subi	r16, 0xFF	; 255
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
 2ae:	1f 93       	push	r17
 2b0:	0f 93       	push	r16
 2b2:	64 d3       	rcall	.+1736   	; 0x97c <sprintf>
	lcd_putsf(0,0,(unsigned char *)"    WELCOME!!   ");
 2b4:	45 e3       	ldi	r20, 0x35	; 53
 2b6:	51 e0       	ldi	r21, 0x01	; 1
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	3c df       	rcall	.-392    	; 0x136 <_Z9lcd_putsfhhPh>
	lcd_putsf(0,1,(unsigned char *)str);
 2be:	a8 01       	movw	r20, r16
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	38 df       	rcall	.-400    	; 0x136 <_Z9lcd_putsfhhPh>
}
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
 2d0:	60 96       	adiw	r28, 0x10	; 16
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <__vector_16>:
unsigned int tCount = 0, hou = 0, min = 0, sec = 0;
int mode = NORMAL_MODE;
int flag = 0;

ISR(TIMER0_OVF_vect)
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
	tCount++;
 2f4:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <tCount>
 2f8:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <tCount+0x1>
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <tCount+0x1>
 302:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <tCount>
	if (tCount >= 61)
 306:	cd 97       	sbiw	r24, 0x3d	; 61
 308:	08 f4       	brcc	.+2      	; 0x30c <__vector_16+0x26>
 30a:	41 c0       	rjmp	.+130    	; 0x38e <__vector_16+0xa8>
	{
		// 1 second
		sec++;
 30c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <sec>
 310:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <sec+0x1>
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <sec+0x1>
 31a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <sec>
		if (sec > 59) { min++; sec = 0; }
 31e:	cc 97       	sbiw	r24, 0x3c	; 60
 320:	68 f0       	brcs	.+26     	; 0x33c <__vector_16+0x56>
 322:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <min>
 326:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <min+0x1>
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <min+0x1>
 330:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <min>
 334:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <sec+0x1>
 338:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <sec>
		if (min > 59) { hou++; min = 0; }
 33c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <min>
 340:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <min+0x1>
 344:	cc 97       	sbiw	r24, 0x3c	; 60
 346:	68 f0       	brcs	.+26     	; 0x362 <__vector_16+0x7c>
 348:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <hou>
 34c:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <hou+0x1>
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <hou+0x1>
 356:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <hou>
 35a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <min+0x1>
 35e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <min>
		if (hou > 23) { hou = min = sec = 0; }
 362:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <hou>
 366:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <hou+0x1>
 36a:	48 97       	sbiw	r24, 0x18	; 24
 36c:	60 f0       	brcs	.+24     	; 0x386 <__vector_16+0xa0>
 36e:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <sec+0x1>
 372:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <sec>
 376:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <min+0x1>
 37a:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <min>
 37e:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <hou+0x1>
 382:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <hou>
		tCount = 0;
 386:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <tCount+0x1>
 38a:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <tCount>
	}
}
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <main>:

int main(void)
{
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	62 97       	sbiw	r28, 0x12	; 18
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
	initSystem();
 3b0:	2f df       	rcall	.-418    	; 0x210 <_Z10initSystemv>
	lcd_clear();
 3b2:	05 df       	rcall	.-502    	; 0x1be <_Z9lcd_clearv>
 3b4:	00 e0       	ldi	r16, 0x00	; 0
	unsigned int inputKey = 0;
	unsigned long long currentPrice = 0;
	unsigned long long totalPrice = 0;
	int flag = 0;
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	a1 2c       	mov	r10, r1
int main(void)
{
	initSystem();
	lcd_clear();
	unsigned int inputKey = 0;
	unsigned long long currentPrice = 0;
 3ba:	b1 2c       	mov	r11, r1
 3bc:	c1 2c       	mov	r12, r1
 3be:	d1 2c       	mov	r13, r1
 3c0:	e1 2c       	mov	r14, r1
 3c2:	f1 2c       	mov	r15, r1
 3c4:	21 2c       	mov	r2, r1
 3c6:	31 2c       	mov	r3, r1
 3c8:	0f 2e       	mov	r0, r31
				}
				flag = 1;
			}
			if(inputKey == 0) flag = 0;
			char str[16];
			sprintf(str,"%ld",currentPrice);
 3ca:	fe e8       	ldi	r31, 0x8E	; 142
 3cc:	4f 2e       	mov	r4, r31
 3ce:	f1 e0       	ldi	r31, 0x01	; 1
 3d0:	5f 2e       	mov	r5, r31
 3d2:	f0 2d       	mov	r31, r0
 3d4:	ce 01       	movw	r24, r28
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	3c 01       	movw	r6, r24
	unsigned long long totalPrice = 0;
	int flag = 0;
	while (1)
	{
		
		inputKey = getKey();
 3da:	fa de       	rcall	.-524    	; 0x1d0 <_Z6getKeyv>
 3dc:	88 2e       	mov	r8, r24
 3de:	91 2c       	mov	r9, r1
 3e0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
		if (mode == NORMAL_MODE)
 3e4:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__data_end+0x1>
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	c1 f4       	brne	.+48     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3ec:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <sec>
		{
			DisplayClock(hou,min,sec);
 3f0:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <sec+0x1>
 3f4:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <min>
 3f8:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <min+0x1>
 3fc:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <hou>
 400:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <hou+0x1>
 404:	3b df       	rcall	.-394    	; 0x27c <_Z12DisplayClockjjj>
 406:	9b e7       	ldi	r25, 0x7B	; 123
			if (inputKey == KEY_MENU) mode = MENU_MODE;
 408:	89 16       	cp	r8, r25
 40a:	91 04       	cpc	r9, r1
 40c:	09 f0       	breq	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40e:	73 c2       	rjmp	.+1254   	; 0x8f6 <__LOCK_REGION_LENGTH__+0x4f6>
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	20 93 a6 01 	sts	0x01A6, r18	; 0x8001a6 <__data_end>
 416:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__data_end+0x1>
 41a:	df cf       	rjmp	.-66     	; 0x3da <main+0x3e>
 41c:	81 30       	cpi	r24, 0x01	; 1
		}
		else if (mode == MENU_MODE)
 41e:	91 05       	cpc	r25, r1
 420:	49 f5       	brne	.+82     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 422:	46 e4       	ldi	r20, 0x46	; 70
		{
			lcd_putsf(0,0,(unsigned char *)"1: Calculation  ");
 424:	51 e0       	ldi	r21, 0x01	; 1
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	85 de       	rcall	.-758    	; 0x136 <_Z9lcd_putsfhhPh>
 42c:	47 e5       	ldi	r20, 0x57	; 87
			lcd_putsf(0,1,(unsigned char *)"2: Total Sales  ");
 42e:	51 e0       	ldi	r21, 0x01	; 1
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	80 de       	rcall	.-768    	; 0x136 <_Z9lcd_putsfhhPh>
 436:	8e ee       	ldi	r24, 0xEE	; 238
 438:	88 16       	cp	r8, r24
			if (inputKey == KEY_1) mode = CALC_MODE;
 43a:	91 04       	cpc	r9, r1
 43c:	39 f4       	brne	.+14     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 43e:	82 e0       	ldi	r24, 0x02	; 2
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 446:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
 44a:	0a c0       	rjmp	.+20     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 44c:	9e ed       	ldi	r25, 0xDE	; 222
 44e:	89 16       	cp	r8, r25
			else if (inputKey == KEY_2) mode = TOTAL_MODE;
 450:	91 04       	cpc	r9, r1
 452:	31 f4       	brne	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <__data_end+0x1>
 45c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
 460:	9f ef       	ldi	r25, 0xFF	; 255
 462:	20 e7       	ldi	r18, 0x70	; 112
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	91 50       	subi	r25, 0x01	; 1
 468:	20 40       	sbci	r18, 0x00	; 0
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 470:	00 00       	nop
 472:	b3 cf       	rjmp	.-154    	; 0x3da <main+0x3e>
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	91 05       	cpc	r25, r1
			inputKey = 0;
			_delay_ms(50);
		}
		else if (mode == CALC_MODE)
 478:	09 f0       	breq	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	36 c2       	rjmp	.+1132   	; 0x8e8 <__LOCK_REGION_LENGTH__+0x4e8>
 47c:	48 e6       	ldi	r20, 0x68	; 104
		{
			lcd_putsf(0,0,(unsigned char *)"Calculation Mode  ");
 47e:	51 e0       	ldi	r21, 0x01	; 1
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	58 de       	rcall	.-848    	; 0x136 <_Z9lcd_putsfhhPh>
 486:	4b e7       	ldi	r20, 0x7B	; 123
			lcd_putsf(0,1,(unsigned char *)"                  ");
 488:	51 e0       	ldi	r21, 0x01	; 1
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	53 de       	rcall	.-858    	; 0x136 <_Z9lcd_putsfhhPh>
 490:	01 15       	cp	r16, r1
 492:	11 05       	cpc	r17, r1
			if(flag == 0)
 494:	09 f0       	breq	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 496:	0c c2       	rjmp	.+1048   	; 0x8b0 <__LOCK_REGION_LENGTH__+0x4b0>
 498:	97 ee       	ldi	r25, 0xE7	; 231
 49a:	89 16       	cp	r8, r25
			{
				if(inputKey == KEY_0) currentPrice = (currentPrice * 10) + 0;
 49c:	91 04       	cpc	r9, r1
 49e:	71 f5       	brne	.+92     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4a0:	2a 2d       	mov	r18, r10
 4a2:	3b 2d       	mov	r19, r11
 4a4:	4c 2d       	mov	r20, r12
 4a6:	5d 2d       	mov	r21, r13
 4a8:	6e 2d       	mov	r22, r14
 4aa:	7f 2d       	mov	r23, r15
 4ac:	82 2d       	mov	r24, r2
 4ae:	93 2d       	mov	r25, r3
 4b0:	01 e0       	ldi	r16, 0x01	; 1
 4b2:	36 d2       	rcall	.+1132   	; 0x920 <__ashldi3>
 4b4:	32 2e       	mov	r3, r18
 4b6:	39 8b       	std	Y+17, r19	; 0x11
 4b8:	4a 8b       	std	Y+18, r20	; 0x12
 4ba:	25 2e       	mov	r2, r21
 4bc:	b6 2f       	mov	r27, r22
 4be:	a7 2f       	mov	r26, r23
 4c0:	f8 2f       	mov	r31, r24
 4c2:	e9 2f       	mov	r30, r25
 4c4:	02 e0       	ldi	r16, 0x02	; 2
 4c6:	2c d2       	rcall	.+1112   	; 0x920 <__ashldi3>
 4c8:	a2 2e       	mov	r10, r18
 4ca:	b3 2e       	mov	r11, r19
 4cc:	c4 2e       	mov	r12, r20
 4ce:	d5 2e       	mov	r13, r21
 4d0:	e6 2e       	mov	r14, r22
 4d2:	f7 2e       	mov	r15, r23
 4d4:	08 2f       	mov	r16, r24
 4d6:	19 2f       	mov	r17, r25
 4d8:	23 2d       	mov	r18, r3
 4da:	39 89       	ldd	r19, Y+17	; 0x11
 4dc:	4a 89       	ldd	r20, Y+18	; 0x12
 4de:	52 2d       	mov	r21, r2
 4e0:	6b 2f       	mov	r22, r27
 4e2:	7a 2f       	mov	r23, r26
 4e4:	8f 2f       	mov	r24, r31
 4e6:	9e 2f       	mov	r25, r30
 4e8:	34 d2       	rcall	.+1128   	; 0x952 <__adddi3>
 4ea:	a2 2e       	mov	r10, r18
 4ec:	b3 2e       	mov	r11, r19
 4ee:	c4 2e       	mov	r12, r20
 4f0:	d5 2e       	mov	r13, r21
 4f2:	e6 2e       	mov	r14, r22
 4f4:	f7 2e       	mov	r15, r23
 4f6:	28 2e       	mov	r2, r24
 4f8:	39 2e       	mov	r3, r25
 4fa:	0f c2       	rjmp	.+1054   	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 4fc:	2e ee       	ldi	r18, 0xEE	; 238
 4fe:	82 16       	cp	r8, r18
				else if(inputKey == KEY_1) currentPrice = (currentPrice * 10) + 1;
 500:	91 04       	cpc	r9, r1
 502:	81 f5       	brne	.+96     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 504:	2a 2d       	mov	r18, r10
 506:	3b 2d       	mov	r19, r11
 508:	4c 2d       	mov	r20, r12
 50a:	5d 2d       	mov	r21, r13
 50c:	6e 2d       	mov	r22, r14
 50e:	7f 2d       	mov	r23, r15
 510:	82 2d       	mov	r24, r2
 512:	93 2d       	mov	r25, r3
 514:	01 e0       	ldi	r16, 0x01	; 1
 516:	04 d2       	rcall	.+1032   	; 0x920 <__ashldi3>
 518:	32 2e       	mov	r3, r18
 51a:	39 8b       	std	Y+17, r19	; 0x11
 51c:	4a 8b       	std	Y+18, r20	; 0x12
 51e:	25 2e       	mov	r2, r21
 520:	b6 2f       	mov	r27, r22
 522:	a7 2f       	mov	r26, r23
 524:	f8 2f       	mov	r31, r24
 526:	e9 2f       	mov	r30, r25
 528:	02 e0       	ldi	r16, 0x02	; 2
 52a:	fa d1       	rcall	.+1012   	; 0x920 <__ashldi3>
 52c:	a2 2e       	mov	r10, r18
 52e:	b3 2e       	mov	r11, r19
 530:	c4 2e       	mov	r12, r20
 532:	d5 2e       	mov	r13, r21
 534:	e6 2e       	mov	r14, r22
 536:	f7 2e       	mov	r15, r23
 538:	08 2f       	mov	r16, r24
 53a:	19 2f       	mov	r17, r25
 53c:	23 2d       	mov	r18, r3
 53e:	39 89       	ldd	r19, Y+17	; 0x11
 540:	4a 89       	ldd	r20, Y+18	; 0x12
 542:	52 2d       	mov	r21, r2
 544:	6b 2f       	mov	r22, r27
 546:	7a 2f       	mov	r23, r26
 548:	8f 2f       	mov	r24, r31
 54a:	9e 2f       	mov	r25, r30
 54c:	02 d2       	rcall	.+1028   	; 0x952 <__adddi3>
 54e:	a1 e0       	ldi	r26, 0x01	; 1
 550:	09 d2       	rcall	.+1042   	; 0x964 <__adddi3_s8>
 552:	a2 2e       	mov	r10, r18
 554:	b3 2e       	mov	r11, r19
 556:	c4 2e       	mov	r12, r20
 558:	d5 2e       	mov	r13, r21
 55a:	e6 2e       	mov	r14, r22
 55c:	f7 2e       	mov	r15, r23
 55e:	28 2e       	mov	r2, r24
 560:	39 2e       	mov	r3, r25
 562:	db c1       	rjmp	.+950    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 564:	8e ed       	ldi	r24, 0xDE	; 222
 566:	88 16       	cp	r8, r24
				else if(inputKey == KEY_2) currentPrice = (currentPrice * 10) + 2;
 568:	91 04       	cpc	r9, r1
 56a:	81 f5       	brne	.+96     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 56c:	2a 2d       	mov	r18, r10
 56e:	3b 2d       	mov	r19, r11
 570:	4c 2d       	mov	r20, r12
 572:	5d 2d       	mov	r21, r13
 574:	6e 2d       	mov	r22, r14
 576:	7f 2d       	mov	r23, r15
 578:	82 2d       	mov	r24, r2
 57a:	93 2d       	mov	r25, r3
 57c:	01 e0       	ldi	r16, 0x01	; 1
 57e:	d0 d1       	rcall	.+928    	; 0x920 <__ashldi3>
 580:	32 2e       	mov	r3, r18
 582:	39 8b       	std	Y+17, r19	; 0x11
 584:	4a 8b       	std	Y+18, r20	; 0x12
 586:	25 2e       	mov	r2, r21
 588:	b6 2f       	mov	r27, r22
 58a:	a7 2f       	mov	r26, r23
 58c:	f8 2f       	mov	r31, r24
 58e:	e9 2f       	mov	r30, r25
 590:	02 e0       	ldi	r16, 0x02	; 2
 592:	c6 d1       	rcall	.+908    	; 0x920 <__ashldi3>
 594:	a2 2e       	mov	r10, r18
 596:	b3 2e       	mov	r11, r19
 598:	c4 2e       	mov	r12, r20
 59a:	d5 2e       	mov	r13, r21
 59c:	e6 2e       	mov	r14, r22
 59e:	f7 2e       	mov	r15, r23
 5a0:	08 2f       	mov	r16, r24
 5a2:	19 2f       	mov	r17, r25
 5a4:	23 2d       	mov	r18, r3
 5a6:	39 89       	ldd	r19, Y+17	; 0x11
 5a8:	4a 89       	ldd	r20, Y+18	; 0x12
 5aa:	52 2d       	mov	r21, r2
 5ac:	6b 2f       	mov	r22, r27
 5ae:	7a 2f       	mov	r23, r26
 5b0:	8f 2f       	mov	r24, r31
 5b2:	9e 2f       	mov	r25, r30
 5b4:	ce d1       	rcall	.+924    	; 0x952 <__adddi3>
 5b6:	a2 e0       	ldi	r26, 0x02	; 2
 5b8:	d5 d1       	rcall	.+938    	; 0x964 <__adddi3_s8>
 5ba:	a2 2e       	mov	r10, r18
 5bc:	b3 2e       	mov	r11, r19
 5be:	c4 2e       	mov	r12, r20
 5c0:	d5 2e       	mov	r13, r21
 5c2:	e6 2e       	mov	r14, r22
 5c4:	f7 2e       	mov	r15, r23
 5c6:	28 2e       	mov	r2, r24
 5c8:	39 2e       	mov	r3, r25
 5ca:	a7 c1       	rjmp	.+846    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 5cc:	9e eb       	ldi	r25, 0xBE	; 190
 5ce:	89 16       	cp	r8, r25
				else if(inputKey == KEY_3) currentPrice = (currentPrice * 10) + 3;
 5d0:	91 04       	cpc	r9, r1
 5d2:	81 f5       	brne	.+96     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 5d4:	2a 2d       	mov	r18, r10
 5d6:	3b 2d       	mov	r19, r11
 5d8:	4c 2d       	mov	r20, r12
 5da:	5d 2d       	mov	r21, r13
 5dc:	6e 2d       	mov	r22, r14
 5de:	7f 2d       	mov	r23, r15
 5e0:	82 2d       	mov	r24, r2
 5e2:	93 2d       	mov	r25, r3
 5e4:	01 e0       	ldi	r16, 0x01	; 1
 5e6:	9c d1       	rcall	.+824    	; 0x920 <__ashldi3>
 5e8:	32 2e       	mov	r3, r18
 5ea:	39 8b       	std	Y+17, r19	; 0x11
 5ec:	4a 8b       	std	Y+18, r20	; 0x12
 5ee:	25 2e       	mov	r2, r21
 5f0:	b6 2f       	mov	r27, r22
 5f2:	a7 2f       	mov	r26, r23
 5f4:	f8 2f       	mov	r31, r24
 5f6:	e9 2f       	mov	r30, r25
 5f8:	02 e0       	ldi	r16, 0x02	; 2
 5fa:	92 d1       	rcall	.+804    	; 0x920 <__ashldi3>
 5fc:	a2 2e       	mov	r10, r18
 5fe:	b3 2e       	mov	r11, r19
 600:	c4 2e       	mov	r12, r20
 602:	d5 2e       	mov	r13, r21
 604:	e6 2e       	mov	r14, r22
 606:	f7 2e       	mov	r15, r23
 608:	08 2f       	mov	r16, r24
 60a:	19 2f       	mov	r17, r25
 60c:	23 2d       	mov	r18, r3
 60e:	39 89       	ldd	r19, Y+17	; 0x11
 610:	4a 89       	ldd	r20, Y+18	; 0x12
 612:	52 2d       	mov	r21, r2
 614:	6b 2f       	mov	r22, r27
 616:	7a 2f       	mov	r23, r26
 618:	8f 2f       	mov	r24, r31
 61a:	9e 2f       	mov	r25, r30
 61c:	9a d1       	rcall	.+820    	; 0x952 <__adddi3>
 61e:	a3 e0       	ldi	r26, 0x03	; 3
 620:	a1 d1       	rcall	.+834    	; 0x964 <__adddi3_s8>
 622:	a2 2e       	mov	r10, r18
 624:	b3 2e       	mov	r11, r19
 626:	c4 2e       	mov	r12, r20
 628:	d5 2e       	mov	r13, r21
 62a:	e6 2e       	mov	r14, r22
 62c:	f7 2e       	mov	r15, r23
 62e:	28 2e       	mov	r2, r24
 630:	39 2e       	mov	r3, r25
 632:	73 c1       	rjmp	.+742    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 634:	2d ee       	ldi	r18, 0xED	; 237
 636:	82 16       	cp	r8, r18
				else if(inputKey == KEY_5) currentPrice = (currentPrice * 10) + 4;
 638:	91 04       	cpc	r9, r1
 63a:	81 f5       	brne	.+96     	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 63c:	2a 2d       	mov	r18, r10
 63e:	3b 2d       	mov	r19, r11
 640:	4c 2d       	mov	r20, r12
 642:	5d 2d       	mov	r21, r13
 644:	6e 2d       	mov	r22, r14
 646:	7f 2d       	mov	r23, r15
 648:	82 2d       	mov	r24, r2
 64a:	93 2d       	mov	r25, r3
 64c:	01 e0       	ldi	r16, 0x01	; 1
 64e:	68 d1       	rcall	.+720    	; 0x920 <__ashldi3>
 650:	32 2e       	mov	r3, r18
 652:	39 8b       	std	Y+17, r19	; 0x11
 654:	4a 8b       	std	Y+18, r20	; 0x12
 656:	25 2e       	mov	r2, r21
 658:	b6 2f       	mov	r27, r22
 65a:	a7 2f       	mov	r26, r23
 65c:	f8 2f       	mov	r31, r24
 65e:	e9 2f       	mov	r30, r25
 660:	02 e0       	ldi	r16, 0x02	; 2
 662:	5e d1       	rcall	.+700    	; 0x920 <__ashldi3>
 664:	a2 2e       	mov	r10, r18
 666:	b3 2e       	mov	r11, r19
 668:	c4 2e       	mov	r12, r20
 66a:	d5 2e       	mov	r13, r21
 66c:	e6 2e       	mov	r14, r22
 66e:	f7 2e       	mov	r15, r23
 670:	08 2f       	mov	r16, r24
 672:	19 2f       	mov	r17, r25
 674:	23 2d       	mov	r18, r3
 676:	39 89       	ldd	r19, Y+17	; 0x11
 678:	4a 89       	ldd	r20, Y+18	; 0x12
 67a:	52 2d       	mov	r21, r2
 67c:	6b 2f       	mov	r22, r27
 67e:	7a 2f       	mov	r23, r26
 680:	8f 2f       	mov	r24, r31
 682:	9e 2f       	mov	r25, r30
 684:	66 d1       	rcall	.+716    	; 0x952 <__adddi3>
 686:	a4 e0       	ldi	r26, 0x04	; 4
 688:	6d d1       	rcall	.+730    	; 0x964 <__adddi3_s8>
 68a:	a2 2e       	mov	r10, r18
 68c:	b3 2e       	mov	r11, r19
 68e:	c4 2e       	mov	r12, r20
 690:	d5 2e       	mov	r13, r21
 692:	e6 2e       	mov	r14, r22
 694:	f7 2e       	mov	r15, r23
 696:	28 2e       	mov	r2, r24
 698:	39 2e       	mov	r3, r25
 69a:	3f c1       	rjmp	.+638    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 69c:	8d ed       	ldi	r24, 0xDD	; 221
				else if(inputKey == KEY_6) currentPrice = (currentPrice * 10) + 5;
 69e:	88 16       	cp	r8, r24
 6a0:	91 04       	cpc	r9, r1
 6a2:	81 f5       	brne	.+96     	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
 6a4:	2a 2d       	mov	r18, r10
 6a6:	3b 2d       	mov	r19, r11
 6a8:	4c 2d       	mov	r20, r12
 6aa:	5d 2d       	mov	r21, r13
 6ac:	6e 2d       	mov	r22, r14
 6ae:	7f 2d       	mov	r23, r15
 6b0:	82 2d       	mov	r24, r2
 6b2:	93 2d       	mov	r25, r3
 6b4:	01 e0       	ldi	r16, 0x01	; 1
 6b6:	34 d1       	rcall	.+616    	; 0x920 <__ashldi3>
 6b8:	32 2e       	mov	r3, r18
 6ba:	39 8b       	std	Y+17, r19	; 0x11
 6bc:	4a 8b       	std	Y+18, r20	; 0x12
 6be:	25 2e       	mov	r2, r21
 6c0:	b6 2f       	mov	r27, r22
 6c2:	a7 2f       	mov	r26, r23
 6c4:	f8 2f       	mov	r31, r24
 6c6:	e9 2f       	mov	r30, r25
 6c8:	02 e0       	ldi	r16, 0x02	; 2
 6ca:	2a d1       	rcall	.+596    	; 0x920 <__ashldi3>
 6cc:	a2 2e       	mov	r10, r18
 6ce:	b3 2e       	mov	r11, r19
 6d0:	c4 2e       	mov	r12, r20
 6d2:	d5 2e       	mov	r13, r21
 6d4:	e6 2e       	mov	r14, r22
 6d6:	f7 2e       	mov	r15, r23
 6d8:	08 2f       	mov	r16, r24
 6da:	19 2f       	mov	r17, r25
 6dc:	23 2d       	mov	r18, r3
 6de:	39 89       	ldd	r19, Y+17	; 0x11
 6e0:	4a 89       	ldd	r20, Y+18	; 0x12
 6e2:	52 2d       	mov	r21, r2
 6e4:	6b 2f       	mov	r22, r27
 6e6:	7a 2f       	mov	r23, r26
 6e8:	8f 2f       	mov	r24, r31
 6ea:	9e 2f       	mov	r25, r30
 6ec:	32 d1       	rcall	.+612    	; 0x952 <__adddi3>
 6ee:	a5 e0       	ldi	r26, 0x05	; 5
 6f0:	39 d1       	rcall	.+626    	; 0x964 <__adddi3_s8>
 6f2:	a2 2e       	mov	r10, r18
 6f4:	b3 2e       	mov	r11, r19
 6f6:	c4 2e       	mov	r12, r20
 6f8:	d5 2e       	mov	r13, r21
 6fa:	e6 2e       	mov	r14, r22
 6fc:	f7 2e       	mov	r15, r23
 6fe:	28 2e       	mov	r2, r24
 700:	39 2e       	mov	r3, r25
 702:	0b c1       	rjmp	.+534    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 704:	9d eb       	ldi	r25, 0xBD	; 189
				else if(inputKey == KEY_7) currentPrice = (currentPrice * 10) + 6;
 706:	89 16       	cp	r8, r25
 708:	91 04       	cpc	r9, r1
 70a:	81 f5       	brne	.+96     	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
 70c:	2a 2d       	mov	r18, r10
 70e:	3b 2d       	mov	r19, r11
 710:	4c 2d       	mov	r20, r12
 712:	5d 2d       	mov	r21, r13
 714:	6e 2d       	mov	r22, r14
 716:	7f 2d       	mov	r23, r15
 718:	82 2d       	mov	r24, r2
 71a:	93 2d       	mov	r25, r3
 71c:	01 e0       	ldi	r16, 0x01	; 1
 71e:	00 d1       	rcall	.+512    	; 0x920 <__ashldi3>
 720:	32 2e       	mov	r3, r18
 722:	39 8b       	std	Y+17, r19	; 0x11
 724:	4a 8b       	std	Y+18, r20	; 0x12
 726:	25 2e       	mov	r2, r21
 728:	b6 2f       	mov	r27, r22
 72a:	a7 2f       	mov	r26, r23
 72c:	f8 2f       	mov	r31, r24
 72e:	e9 2f       	mov	r30, r25
 730:	02 e0       	ldi	r16, 0x02	; 2
 732:	f6 d0       	rcall	.+492    	; 0x920 <__ashldi3>
 734:	a2 2e       	mov	r10, r18
 736:	b3 2e       	mov	r11, r19
 738:	c4 2e       	mov	r12, r20
 73a:	d5 2e       	mov	r13, r21
 73c:	e6 2e       	mov	r14, r22
 73e:	f7 2e       	mov	r15, r23
 740:	08 2f       	mov	r16, r24
 742:	19 2f       	mov	r17, r25
 744:	23 2d       	mov	r18, r3
 746:	39 89       	ldd	r19, Y+17	; 0x11
 748:	4a 89       	ldd	r20, Y+18	; 0x12
 74a:	52 2d       	mov	r21, r2
 74c:	6b 2f       	mov	r22, r27
 74e:	7a 2f       	mov	r23, r26
 750:	8f 2f       	mov	r24, r31
 752:	9e 2f       	mov	r25, r30
 754:	fe d0       	rcall	.+508    	; 0x952 <__adddi3>
 756:	a6 e0       	ldi	r26, 0x06	; 6
 758:	05 d1       	rcall	.+522    	; 0x964 <__adddi3_s8>
 75a:	a2 2e       	mov	r10, r18
 75c:	b3 2e       	mov	r11, r19
 75e:	c4 2e       	mov	r12, r20
 760:	d5 2e       	mov	r13, r21
 762:	e6 2e       	mov	r14, r22
 764:	f7 2e       	mov	r15, r23
 766:	28 2e       	mov	r2, r24
 768:	39 2e       	mov	r3, r25
 76a:	d7 c0       	rjmp	.+430    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 76c:	2b ee       	ldi	r18, 0xEB	; 235
				else if(inputKey == KEY_9) currentPrice = (currentPrice * 10) + 7;
 76e:	82 16       	cp	r8, r18
 770:	91 04       	cpc	r9, r1
 772:	81 f5       	brne	.+96     	; 0x7d4 <__LOCK_REGION_LENGTH__+0x3d4>
 774:	2a 2d       	mov	r18, r10
 776:	3b 2d       	mov	r19, r11
 778:	4c 2d       	mov	r20, r12
 77a:	5d 2d       	mov	r21, r13
 77c:	6e 2d       	mov	r22, r14
 77e:	7f 2d       	mov	r23, r15
 780:	82 2d       	mov	r24, r2
 782:	93 2d       	mov	r25, r3
 784:	01 e0       	ldi	r16, 0x01	; 1
 786:	cc d0       	rcall	.+408    	; 0x920 <__ashldi3>
 788:	32 2e       	mov	r3, r18
 78a:	39 8b       	std	Y+17, r19	; 0x11
 78c:	4a 8b       	std	Y+18, r20	; 0x12
 78e:	25 2e       	mov	r2, r21
 790:	b6 2f       	mov	r27, r22
 792:	a7 2f       	mov	r26, r23
 794:	f8 2f       	mov	r31, r24
 796:	e9 2f       	mov	r30, r25
 798:	02 e0       	ldi	r16, 0x02	; 2
 79a:	c2 d0       	rcall	.+388    	; 0x920 <__ashldi3>
 79c:	a2 2e       	mov	r10, r18
 79e:	b3 2e       	mov	r11, r19
 7a0:	c4 2e       	mov	r12, r20
 7a2:	d5 2e       	mov	r13, r21
 7a4:	e6 2e       	mov	r14, r22
 7a6:	f7 2e       	mov	r15, r23
 7a8:	08 2f       	mov	r16, r24
 7aa:	19 2f       	mov	r17, r25
 7ac:	23 2d       	mov	r18, r3
 7ae:	39 89       	ldd	r19, Y+17	; 0x11
 7b0:	4a 89       	ldd	r20, Y+18	; 0x12
 7b2:	52 2d       	mov	r21, r2
 7b4:	6b 2f       	mov	r22, r27
 7b6:	7a 2f       	mov	r23, r26
 7b8:	8f 2f       	mov	r24, r31
 7ba:	9e 2f       	mov	r25, r30
 7bc:	ca d0       	rcall	.+404    	; 0x952 <__adddi3>
 7be:	a7 e0       	ldi	r26, 0x07	; 7
 7c0:	d1 d0       	rcall	.+418    	; 0x964 <__adddi3_s8>
 7c2:	a2 2e       	mov	r10, r18
 7c4:	b3 2e       	mov	r11, r19
 7c6:	c4 2e       	mov	r12, r20
 7c8:	d5 2e       	mov	r13, r21
 7ca:	e6 2e       	mov	r14, r22
 7cc:	f7 2e       	mov	r15, r23
 7ce:	28 2e       	mov	r2, r24
 7d0:	39 2e       	mov	r3, r25
 7d2:	a3 c0       	rjmp	.+326    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 7d4:	8b ed       	ldi	r24, 0xDB	; 219
				else if(inputKey == KEY_10) currentPrice = (currentPrice * 10) +8;
 7d6:	88 16       	cp	r8, r24
 7d8:	91 04       	cpc	r9, r1
 7da:	81 f5       	brne	.+96     	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
 7dc:	2a 2d       	mov	r18, r10
 7de:	3b 2d       	mov	r19, r11
 7e0:	4c 2d       	mov	r20, r12
 7e2:	5d 2d       	mov	r21, r13
 7e4:	6e 2d       	mov	r22, r14
 7e6:	7f 2d       	mov	r23, r15
 7e8:	82 2d       	mov	r24, r2
 7ea:	93 2d       	mov	r25, r3
 7ec:	01 e0       	ldi	r16, 0x01	; 1
 7ee:	98 d0       	rcall	.+304    	; 0x920 <__ashldi3>
 7f0:	32 2e       	mov	r3, r18
 7f2:	39 8b       	std	Y+17, r19	; 0x11
 7f4:	4a 8b       	std	Y+18, r20	; 0x12
 7f6:	25 2e       	mov	r2, r21
 7f8:	b6 2f       	mov	r27, r22
 7fa:	a7 2f       	mov	r26, r23
 7fc:	f8 2f       	mov	r31, r24
 7fe:	e9 2f       	mov	r30, r25
 800:	02 e0       	ldi	r16, 0x02	; 2
 802:	8e d0       	rcall	.+284    	; 0x920 <__ashldi3>
 804:	a2 2e       	mov	r10, r18
 806:	b3 2e       	mov	r11, r19
 808:	c4 2e       	mov	r12, r20
 80a:	d5 2e       	mov	r13, r21
 80c:	e6 2e       	mov	r14, r22
 80e:	f7 2e       	mov	r15, r23
 810:	08 2f       	mov	r16, r24
 812:	19 2f       	mov	r17, r25
 814:	23 2d       	mov	r18, r3
 816:	39 89       	ldd	r19, Y+17	; 0x11
 818:	4a 89       	ldd	r20, Y+18	; 0x12
 81a:	52 2d       	mov	r21, r2
 81c:	6b 2f       	mov	r22, r27
 81e:	7a 2f       	mov	r23, r26
 820:	8f 2f       	mov	r24, r31
 822:	9e 2f       	mov	r25, r30
 824:	96 d0       	rcall	.+300    	; 0x952 <__adddi3>
 826:	a8 e0       	ldi	r26, 0x08	; 8
 828:	9d d0       	rcall	.+314    	; 0x964 <__adddi3_s8>
 82a:	a2 2e       	mov	r10, r18
 82c:	b3 2e       	mov	r11, r19
 82e:	c4 2e       	mov	r12, r20
 830:	d5 2e       	mov	r13, r21
 832:	e6 2e       	mov	r14, r22
 834:	f7 2e       	mov	r15, r23
 836:	28 2e       	mov	r2, r24
 838:	39 2e       	mov	r3, r25
 83a:	6f c0       	rjmp	.+222    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 83c:	9b eb       	ldi	r25, 0xBB	; 187
				else if(inputKey == KEY_11) currentPrice = (currentPrice * 10) +9;
 83e:	89 16       	cp	r8, r25
 840:	91 04       	cpc	r9, r1
 842:	81 f5       	brne	.+96     	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
 844:	2a 2d       	mov	r18, r10
 846:	3b 2d       	mov	r19, r11
 848:	4c 2d       	mov	r20, r12
 84a:	5d 2d       	mov	r21, r13
 84c:	6e 2d       	mov	r22, r14
 84e:	7f 2d       	mov	r23, r15
 850:	82 2d       	mov	r24, r2
 852:	93 2d       	mov	r25, r3
 854:	01 e0       	ldi	r16, 0x01	; 1
 856:	64 d0       	rcall	.+200    	; 0x920 <__ashldi3>
 858:	32 2e       	mov	r3, r18
 85a:	39 8b       	std	Y+17, r19	; 0x11
 85c:	4a 8b       	std	Y+18, r20	; 0x12
 85e:	25 2e       	mov	r2, r21
 860:	b6 2f       	mov	r27, r22
 862:	a7 2f       	mov	r26, r23
 864:	f8 2f       	mov	r31, r24
 866:	e9 2f       	mov	r30, r25
 868:	02 e0       	ldi	r16, 0x02	; 2
 86a:	5a d0       	rcall	.+180    	; 0x920 <__ashldi3>
 86c:	a2 2e       	mov	r10, r18
 86e:	b3 2e       	mov	r11, r19
 870:	c4 2e       	mov	r12, r20
 872:	d5 2e       	mov	r13, r21
 874:	e6 2e       	mov	r14, r22
 876:	f7 2e       	mov	r15, r23
 878:	08 2f       	mov	r16, r24
 87a:	19 2f       	mov	r17, r25
 87c:	23 2d       	mov	r18, r3
 87e:	39 89       	ldd	r19, Y+17	; 0x11
 880:	4a 89       	ldd	r20, Y+18	; 0x12
 882:	52 2d       	mov	r21, r2
 884:	6b 2f       	mov	r22, r27
 886:	7a 2f       	mov	r23, r26
 888:	8f 2f       	mov	r24, r31
 88a:	9e 2f       	mov	r25, r30
 88c:	62 d0       	rcall	.+196    	; 0x952 <__adddi3>
 88e:	a9 e0       	ldi	r26, 0x09	; 9
 890:	69 d0       	rcall	.+210    	; 0x964 <__adddi3_s8>
 892:	a2 2e       	mov	r10, r18
 894:	b3 2e       	mov	r11, r19
 896:	c4 2e       	mov	r12, r20
 898:	d5 2e       	mov	r13, r21
 89a:	e6 2e       	mov	r14, r22
 89c:	f7 2e       	mov	r15, r23
 89e:	28 2e       	mov	r2, r24
 8a0:	39 2e       	mov	r3, r25
 8a2:	3b c0       	rjmp	.+118    	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
 8a4:	2e e7       	ldi	r18, 0x7E	; 126
 8a6:	82 16       	cp	r8, r18
				else if(inputKey == KEY_PLUS)
 8a8:	91 04       	cpc	r9, r1
 8aa:	79 f1       	breq	.+94     	; 0x90a <__LOCK_REGION_LENGTH__+0x50a>
 8ac:	01 e0       	ldi	r16, 0x01	; 1
 8ae:	10 e0       	ldi	r17, 0x00	; 0
				{
					totalPrice = totalPrice + currentPrice;
					currentPrice = 0;
				}
				flag = 1;
 8b0:	81 14       	cp	r8, r1
 8b2:	91 04       	cpc	r9, r1
			}
			if(inputKey == 0) flag = 0;
 8b4:	11 f4       	brne	.+4      	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
 8b6:	00 e0       	ldi	r16, 0x00	; 0
 8b8:	10 e0       	ldi	r17, 0x00	; 0
 8ba:	3f 92       	push	r3
 8bc:	2f 92       	push	r2
			char str[16];
			sprintf(str,"%ld",currentPrice);
 8be:	ff 92       	push	r15
 8c0:	ef 92       	push	r14
 8c2:	df 92       	push	r13
 8c4:	cf 92       	push	r12
 8c6:	bf 92       	push	r11
 8c8:	af 92       	push	r10
 8ca:	5f 92       	push	r5
 8cc:	4f 92       	push	r4
 8ce:	7f 92       	push	r7
 8d0:	6f 92       	push	r6
 8d2:	54 d0       	rcall	.+168    	; 0x97c <sprintf>
 8d4:	a3 01       	movw	r20, r6
 8d6:	61 e0       	ldi	r22, 0x01	; 1
 8d8:	80 e0       	ldi	r24, 0x00	; 0
			lcd_putsf(0,1,(unsigned char *)str);
 8da:	2d dc       	rcall	.-1958   	; 0x136 <_Z9lcd_putsfhhPh>
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	f8 94       	cli
 8e0:	de bf       	out	0x3e, r29	; 62
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	cd bf       	out	0x3d, r28	; 61
 8e6:	07 c0       	rjmp	.+14     	; 0x8f6 <__LOCK_REGION_LENGTH__+0x4f6>
 8e8:	03 97       	sbiw	r24, 0x03	; 3
 8ea:	29 f4       	brne	.+10     	; 0x8f6 <__LOCK_REGION_LENGTH__+0x4f6>
 8ec:	42 e9       	ldi	r20, 0x92	; 146
 8ee:	51 e0       	ldi	r21, 0x01	; 1
		}
		else if (mode == TOTAL_MODE)
 8f0:	60 e0       	ldi	r22, 0x00	; 0
 8f2:	80 e0       	ldi	r24, 0x00	; 0
		{
			lcd_putsf(0,0,(unsigned char *)"Total Sales Mode  ");
 8f4:	20 dc       	rcall	.-1984   	; 0x136 <_Z9lcd_putsfhhPh>
 8f6:	97 e7       	ldi	r25, 0x77	; 119
 8f8:	89 16       	cp	r8, r25
 8fa:	91 04       	cpc	r9, r1
 8fc:	09 f0       	breq	.+2      	; 0x900 <__LOCK_REGION_LENGTH__+0x500>
 8fe:	6d cd       	rjmp	.-1318   	; 0x3da <main+0x3e>
		}
		// Whenever client push the lobby key, then go back to normal mode.
		if (inputKey == KEY_LOBBY) mode = NORMAL_MODE;
 900:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__data_end+0x1>
 904:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
 908:	68 cd       	rjmp	.-1328   	; 0x3da <main+0x3e>
 90a:	a1 2c       	mov	r10, r1
 90c:	b1 2c       	mov	r11, r1
 90e:	c1 2c       	mov	r12, r1
 910:	d1 2c       	mov	r13, r1
 912:	e1 2c       	mov	r14, r1
				else if(inputKey == KEY_10) currentPrice = (currentPrice * 10) +8;
				else if(inputKey == KEY_11) currentPrice = (currentPrice * 10) +9;
				else if(inputKey == KEY_PLUS)
				{
					totalPrice = totalPrice + currentPrice;
					currentPrice = 0;
 914:	f1 2c       	mov	r15, r1
 916:	21 2c       	mov	r2, r1
 918:	31 2c       	mov	r3, r1
 91a:	01 e0       	ldi	r16, 0x01	; 1
 91c:	10 e0       	ldi	r17, 0x00	; 0
 91e:	cd cf       	rjmp	.-102    	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>

00000920 <__ashldi3>:
 920:	0f 93       	push	r16
 922:	08 30       	cpi	r16, 0x08	; 8
				}
				flag = 1;
			}
			if(inputKey == 0) flag = 0;
 924:	90 f0       	brcs	.+36     	; 0x94a <__ashldi3+0x2a>
 926:	98 2f       	mov	r25, r24
 928:	87 2f       	mov	r24, r23
 92a:	76 2f       	mov	r23, r22
 92c:	65 2f       	mov	r22, r21
 92e:	54 2f       	mov	r21, r20
 930:	43 2f       	mov	r20, r19
 932:	32 2f       	mov	r19, r18
 934:	22 27       	eor	r18, r18
 936:	08 50       	subi	r16, 0x08	; 8
 938:	f4 cf       	rjmp	.-24     	; 0x922 <__ashldi3+0x2>
 93a:	22 0f       	add	r18, r18
 93c:	33 1f       	adc	r19, r19
 93e:	44 1f       	adc	r20, r20
 940:	55 1f       	adc	r21, r21
 942:	66 1f       	adc	r22, r22
 944:	77 1f       	adc	r23, r23
 946:	88 1f       	adc	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	0a 95       	dec	r16
 94c:	b2 f7       	brpl	.-20     	; 0x93a <__ashldi3+0x1a>
 94e:	0f 91       	pop	r16
 950:	08 95       	ret

00000952 <__adddi3>:
 952:	2a 0d       	add	r18, r10
 954:	3b 1d       	adc	r19, r11
 956:	4c 1d       	adc	r20, r12
 958:	5d 1d       	adc	r21, r13
 95a:	6e 1d       	adc	r22, r14
 95c:	7f 1d       	adc	r23, r15
 95e:	80 1f       	adc	r24, r16
 960:	91 1f       	adc	r25, r17
 962:	08 95       	ret

00000964 <__adddi3_s8>:
 964:	00 24       	eor	r0, r0
 966:	a7 fd       	sbrc	r26, 7
 968:	00 94       	com	r0
 96a:	2a 0f       	add	r18, r26
 96c:	30 1d       	adc	r19, r0
 96e:	40 1d       	adc	r20, r0
 970:	50 1d       	adc	r21, r0
 972:	60 1d       	adc	r22, r0
 974:	70 1d       	adc	r23, r0
 976:	80 1d       	adc	r24, r0
 978:	90 1d       	adc	r25, r0
 97a:	08 95       	ret

0000097c <sprintf>:
 97c:	0f 93       	push	r16
 97e:	1f 93       	push	r17
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	cd b7       	in	r28, 0x3d	; 61
 986:	de b7       	in	r29, 0x3e	; 62
 988:	2e 97       	sbiw	r28, 0x0e	; 14
 98a:	0f b6       	in	r0, 0x3f	; 63
 98c:	f8 94       	cli
 98e:	de bf       	out	0x3e, r29	; 62
 990:	0f be       	out	0x3f, r0	; 63
 992:	cd bf       	out	0x3d, r28	; 61
 994:	0d 89       	ldd	r16, Y+21	; 0x15
 996:	1e 89       	ldd	r17, Y+22	; 0x16
 998:	86 e0       	ldi	r24, 0x06	; 6
 99a:	8c 83       	std	Y+4, r24	; 0x04
 99c:	1a 83       	std	Y+2, r17	; 0x02
 99e:	09 83       	std	Y+1, r16	; 0x01
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	9f e7       	ldi	r25, 0x7F	; 127
 9a4:	9e 83       	std	Y+6, r25	; 0x06
 9a6:	8d 83       	std	Y+5, r24	; 0x05
 9a8:	ae 01       	movw	r20, r28
 9aa:	47 5e       	subi	r20, 0xE7	; 231
 9ac:	5f 4f       	sbci	r21, 0xFF	; 255
 9ae:	6f 89       	ldd	r22, Y+23	; 0x17
 9b0:	78 8d       	ldd	r23, Y+24	; 0x18
 9b2:	ce 01       	movw	r24, r28
 9b4:	01 96       	adiw	r24, 0x01	; 1
 9b6:	10 d0       	rcall	.+32     	; 0x9d8 <vfprintf>
 9b8:	ef 81       	ldd	r30, Y+7	; 0x07
 9ba:	f8 85       	ldd	r31, Y+8	; 0x08
 9bc:	e0 0f       	add	r30, r16
 9be:	f1 1f       	adc	r31, r17
 9c0:	10 82       	st	Z, r1
 9c2:	2e 96       	adiw	r28, 0x0e	; 14
 9c4:	0f b6       	in	r0, 0x3f	; 63
 9c6:	f8 94       	cli
 9c8:	de bf       	out	0x3e, r29	; 62
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	cd bf       	out	0x3d, r28	; 61
 9ce:	df 91       	pop	r29
 9d0:	cf 91       	pop	r28
 9d2:	1f 91       	pop	r17
 9d4:	0f 91       	pop	r16
 9d6:	08 95       	ret

000009d8 <vfprintf>:
 9d8:	2f 92       	push	r2
 9da:	3f 92       	push	r3
 9dc:	4f 92       	push	r4
 9de:	5f 92       	push	r5
 9e0:	6f 92       	push	r6
 9e2:	7f 92       	push	r7
 9e4:	8f 92       	push	r8
 9e6:	9f 92       	push	r9
 9e8:	af 92       	push	r10
 9ea:	bf 92       	push	r11
 9ec:	cf 92       	push	r12
 9ee:	df 92       	push	r13
 9f0:	ef 92       	push	r14
 9f2:	ff 92       	push	r15
 9f4:	0f 93       	push	r16
 9f6:	1f 93       	push	r17
 9f8:	cf 93       	push	r28
 9fa:	df 93       	push	r29
 9fc:	cd b7       	in	r28, 0x3d	; 61
 9fe:	de b7       	in	r29, 0x3e	; 62
 a00:	2b 97       	sbiw	r28, 0x0b	; 11
 a02:	0f b6       	in	r0, 0x3f	; 63
 a04:	f8 94       	cli
 a06:	de bf       	out	0x3e, r29	; 62
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	cd bf       	out	0x3d, r28	; 61
 a0c:	6c 01       	movw	r12, r24
 a0e:	7b 01       	movw	r14, r22
 a10:	8a 01       	movw	r16, r20
 a12:	fc 01       	movw	r30, r24
 a14:	17 82       	std	Z+7, r1	; 0x07
 a16:	16 82       	std	Z+6, r1	; 0x06
 a18:	83 81       	ldd	r24, Z+3	; 0x03
 a1a:	81 ff       	sbrs	r24, 1
 a1c:	bf c1       	rjmp	.+894    	; 0xd9c <vfprintf+0x3c4>
 a1e:	ce 01       	movw	r24, r28
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	3c 01       	movw	r6, r24
 a24:	f6 01       	movw	r30, r12
 a26:	93 81       	ldd	r25, Z+3	; 0x03
 a28:	f7 01       	movw	r30, r14
 a2a:	93 fd       	sbrc	r25, 3
 a2c:	85 91       	lpm	r24, Z+
 a2e:	93 ff       	sbrs	r25, 3
 a30:	81 91       	ld	r24, Z+
 a32:	7f 01       	movw	r14, r30
 a34:	88 23       	and	r24, r24
 a36:	09 f4       	brne	.+2      	; 0xa3a <vfprintf+0x62>
 a38:	ad c1       	rjmp	.+858    	; 0xd94 <vfprintf+0x3bc>
 a3a:	85 32       	cpi	r24, 0x25	; 37
 a3c:	39 f4       	brne	.+14     	; 0xa4c <vfprintf+0x74>
 a3e:	93 fd       	sbrc	r25, 3
 a40:	85 91       	lpm	r24, Z+
 a42:	93 ff       	sbrs	r25, 3
 a44:	81 91       	ld	r24, Z+
 a46:	7f 01       	movw	r14, r30
 a48:	85 32       	cpi	r24, 0x25	; 37
 a4a:	21 f4       	brne	.+8      	; 0xa54 <vfprintf+0x7c>
 a4c:	b6 01       	movw	r22, r12
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	d6 d1       	rcall	.+940    	; 0xdfe <fputc>
 a52:	e8 cf       	rjmp	.-48     	; 0xa24 <vfprintf+0x4c>
 a54:	91 2c       	mov	r9, r1
 a56:	21 2c       	mov	r2, r1
 a58:	31 2c       	mov	r3, r1
 a5a:	ff e1       	ldi	r31, 0x1F	; 31
 a5c:	f3 15       	cp	r31, r3
 a5e:	d8 f0       	brcs	.+54     	; 0xa96 <vfprintf+0xbe>
 a60:	8b 32       	cpi	r24, 0x2B	; 43
 a62:	79 f0       	breq	.+30     	; 0xa82 <vfprintf+0xaa>
 a64:	38 f4       	brcc	.+14     	; 0xa74 <vfprintf+0x9c>
 a66:	80 32       	cpi	r24, 0x20	; 32
 a68:	79 f0       	breq	.+30     	; 0xa88 <vfprintf+0xb0>
 a6a:	83 32       	cpi	r24, 0x23	; 35
 a6c:	a1 f4       	brne	.+40     	; 0xa96 <vfprintf+0xbe>
 a6e:	23 2d       	mov	r18, r3
 a70:	20 61       	ori	r18, 0x10	; 16
 a72:	1d c0       	rjmp	.+58     	; 0xaae <vfprintf+0xd6>
 a74:	8d 32       	cpi	r24, 0x2D	; 45
 a76:	61 f0       	breq	.+24     	; 0xa90 <vfprintf+0xb8>
 a78:	80 33       	cpi	r24, 0x30	; 48
 a7a:	69 f4       	brne	.+26     	; 0xa96 <vfprintf+0xbe>
 a7c:	23 2d       	mov	r18, r3
 a7e:	21 60       	ori	r18, 0x01	; 1
 a80:	16 c0       	rjmp	.+44     	; 0xaae <vfprintf+0xd6>
 a82:	83 2d       	mov	r24, r3
 a84:	82 60       	ori	r24, 0x02	; 2
 a86:	38 2e       	mov	r3, r24
 a88:	e3 2d       	mov	r30, r3
 a8a:	e4 60       	ori	r30, 0x04	; 4
 a8c:	3e 2e       	mov	r3, r30
 a8e:	2a c0       	rjmp	.+84     	; 0xae4 <vfprintf+0x10c>
 a90:	f3 2d       	mov	r31, r3
 a92:	f8 60       	ori	r31, 0x08	; 8
 a94:	1d c0       	rjmp	.+58     	; 0xad0 <vfprintf+0xf8>
 a96:	37 fc       	sbrc	r3, 7
 a98:	2d c0       	rjmp	.+90     	; 0xaf4 <vfprintf+0x11c>
 a9a:	20 ed       	ldi	r18, 0xD0	; 208
 a9c:	28 0f       	add	r18, r24
 a9e:	2a 30       	cpi	r18, 0x0A	; 10
 aa0:	40 f0       	brcs	.+16     	; 0xab2 <vfprintf+0xda>
 aa2:	8e 32       	cpi	r24, 0x2E	; 46
 aa4:	b9 f4       	brne	.+46     	; 0xad4 <vfprintf+0xfc>
 aa6:	36 fc       	sbrc	r3, 6
 aa8:	75 c1       	rjmp	.+746    	; 0xd94 <vfprintf+0x3bc>
 aaa:	23 2d       	mov	r18, r3
 aac:	20 64       	ori	r18, 0x40	; 64
 aae:	32 2e       	mov	r3, r18
 ab0:	19 c0       	rjmp	.+50     	; 0xae4 <vfprintf+0x10c>
 ab2:	36 fe       	sbrs	r3, 6
 ab4:	06 c0       	rjmp	.+12     	; 0xac2 <vfprintf+0xea>
 ab6:	8a e0       	ldi	r24, 0x0A	; 10
 ab8:	98 9e       	mul	r9, r24
 aba:	20 0d       	add	r18, r0
 abc:	11 24       	eor	r1, r1
 abe:	92 2e       	mov	r9, r18
 ac0:	11 c0       	rjmp	.+34     	; 0xae4 <vfprintf+0x10c>
 ac2:	ea e0       	ldi	r30, 0x0A	; 10
 ac4:	2e 9e       	mul	r2, r30
 ac6:	20 0d       	add	r18, r0
 ac8:	11 24       	eor	r1, r1
 aca:	22 2e       	mov	r2, r18
 acc:	f3 2d       	mov	r31, r3
 ace:	f0 62       	ori	r31, 0x20	; 32
 ad0:	3f 2e       	mov	r3, r31
 ad2:	08 c0       	rjmp	.+16     	; 0xae4 <vfprintf+0x10c>
 ad4:	8c 36       	cpi	r24, 0x6C	; 108
 ad6:	21 f4       	brne	.+8      	; 0xae0 <vfprintf+0x108>
 ad8:	83 2d       	mov	r24, r3
 ada:	80 68       	ori	r24, 0x80	; 128
 adc:	38 2e       	mov	r3, r24
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <vfprintf+0x10c>
 ae0:	88 36       	cpi	r24, 0x68	; 104
 ae2:	41 f4       	brne	.+16     	; 0xaf4 <vfprintf+0x11c>
 ae4:	f7 01       	movw	r30, r14
 ae6:	93 fd       	sbrc	r25, 3
 ae8:	85 91       	lpm	r24, Z+
 aea:	93 ff       	sbrs	r25, 3
 aec:	81 91       	ld	r24, Z+
 aee:	7f 01       	movw	r14, r30
 af0:	81 11       	cpse	r24, r1
 af2:	b3 cf       	rjmp	.-154    	; 0xa5a <vfprintf+0x82>
 af4:	98 2f       	mov	r25, r24
 af6:	9f 7d       	andi	r25, 0xDF	; 223
 af8:	95 54       	subi	r25, 0x45	; 69
 afa:	93 30       	cpi	r25, 0x03	; 3
 afc:	28 f4       	brcc	.+10     	; 0xb08 <vfprintf+0x130>
 afe:	0c 5f       	subi	r16, 0xFC	; 252
 b00:	1f 4f       	sbci	r17, 0xFF	; 255
 b02:	9f e3       	ldi	r25, 0x3F	; 63
 b04:	99 83       	std	Y+1, r25	; 0x01
 b06:	0d c0       	rjmp	.+26     	; 0xb22 <vfprintf+0x14a>
 b08:	83 36       	cpi	r24, 0x63	; 99
 b0a:	31 f0       	breq	.+12     	; 0xb18 <vfprintf+0x140>
 b0c:	83 37       	cpi	r24, 0x73	; 115
 b0e:	71 f0       	breq	.+28     	; 0xb2c <vfprintf+0x154>
 b10:	83 35       	cpi	r24, 0x53	; 83
 b12:	09 f0       	breq	.+2      	; 0xb16 <vfprintf+0x13e>
 b14:	55 c0       	rjmp	.+170    	; 0xbc0 <vfprintf+0x1e8>
 b16:	20 c0       	rjmp	.+64     	; 0xb58 <vfprintf+0x180>
 b18:	f8 01       	movw	r30, r16
 b1a:	80 81       	ld	r24, Z
 b1c:	89 83       	std	Y+1, r24	; 0x01
 b1e:	0e 5f       	subi	r16, 0xFE	; 254
 b20:	1f 4f       	sbci	r17, 0xFF	; 255
 b22:	88 24       	eor	r8, r8
 b24:	83 94       	inc	r8
 b26:	91 2c       	mov	r9, r1
 b28:	53 01       	movw	r10, r6
 b2a:	12 c0       	rjmp	.+36     	; 0xb50 <vfprintf+0x178>
 b2c:	28 01       	movw	r4, r16
 b2e:	f2 e0       	ldi	r31, 0x02	; 2
 b30:	4f 0e       	add	r4, r31
 b32:	51 1c       	adc	r5, r1
 b34:	f8 01       	movw	r30, r16
 b36:	a0 80       	ld	r10, Z
 b38:	b1 80       	ldd	r11, Z+1	; 0x01
 b3a:	36 fe       	sbrs	r3, 6
 b3c:	03 c0       	rjmp	.+6      	; 0xb44 <vfprintf+0x16c>
 b3e:	69 2d       	mov	r22, r9
 b40:	70 e0       	ldi	r23, 0x00	; 0
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <vfprintf+0x170>
 b44:	6f ef       	ldi	r22, 0xFF	; 255
 b46:	7f ef       	ldi	r23, 0xFF	; 255
 b48:	c5 01       	movw	r24, r10
 b4a:	4e d1       	rcall	.+668    	; 0xde8 <strnlen>
 b4c:	4c 01       	movw	r8, r24
 b4e:	82 01       	movw	r16, r4
 b50:	f3 2d       	mov	r31, r3
 b52:	ff 77       	andi	r31, 0x7F	; 127
 b54:	3f 2e       	mov	r3, r31
 b56:	15 c0       	rjmp	.+42     	; 0xb82 <vfprintf+0x1aa>
 b58:	28 01       	movw	r4, r16
 b5a:	22 e0       	ldi	r18, 0x02	; 2
 b5c:	42 0e       	add	r4, r18
 b5e:	51 1c       	adc	r5, r1
 b60:	f8 01       	movw	r30, r16
 b62:	a0 80       	ld	r10, Z
 b64:	b1 80       	ldd	r11, Z+1	; 0x01
 b66:	36 fe       	sbrs	r3, 6
 b68:	03 c0       	rjmp	.+6      	; 0xb70 <vfprintf+0x198>
 b6a:	69 2d       	mov	r22, r9
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	02 c0       	rjmp	.+4      	; 0xb74 <vfprintf+0x19c>
 b70:	6f ef       	ldi	r22, 0xFF	; 255
 b72:	7f ef       	ldi	r23, 0xFF	; 255
 b74:	c5 01       	movw	r24, r10
 b76:	2d d1       	rcall	.+602    	; 0xdd2 <strnlen_P>
 b78:	4c 01       	movw	r8, r24
 b7a:	f3 2d       	mov	r31, r3
 b7c:	f0 68       	ori	r31, 0x80	; 128
 b7e:	3f 2e       	mov	r3, r31
 b80:	82 01       	movw	r16, r4
 b82:	33 fc       	sbrc	r3, 3
 b84:	19 c0       	rjmp	.+50     	; 0xbb8 <vfprintf+0x1e0>
 b86:	82 2d       	mov	r24, r2
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	88 16       	cp	r8, r24
 b8c:	99 06       	cpc	r9, r25
 b8e:	a0 f4       	brcc	.+40     	; 0xbb8 <vfprintf+0x1e0>
 b90:	b6 01       	movw	r22, r12
 b92:	80 e2       	ldi	r24, 0x20	; 32
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	33 d1       	rcall	.+614    	; 0xdfe <fputc>
 b98:	2a 94       	dec	r2
 b9a:	f5 cf       	rjmp	.-22     	; 0xb86 <vfprintf+0x1ae>
 b9c:	f5 01       	movw	r30, r10
 b9e:	37 fc       	sbrc	r3, 7
 ba0:	85 91       	lpm	r24, Z+
 ba2:	37 fe       	sbrs	r3, 7
 ba4:	81 91       	ld	r24, Z+
 ba6:	5f 01       	movw	r10, r30
 ba8:	b6 01       	movw	r22, r12
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	28 d1       	rcall	.+592    	; 0xdfe <fputc>
 bae:	21 10       	cpse	r2, r1
 bb0:	2a 94       	dec	r2
 bb2:	21 e0       	ldi	r18, 0x01	; 1
 bb4:	82 1a       	sub	r8, r18
 bb6:	91 08       	sbc	r9, r1
 bb8:	81 14       	cp	r8, r1
 bba:	91 04       	cpc	r9, r1
 bbc:	79 f7       	brne	.-34     	; 0xb9c <vfprintf+0x1c4>
 bbe:	e1 c0       	rjmp	.+450    	; 0xd82 <vfprintf+0x3aa>
 bc0:	84 36       	cpi	r24, 0x64	; 100
 bc2:	11 f0       	breq	.+4      	; 0xbc8 <vfprintf+0x1f0>
 bc4:	89 36       	cpi	r24, 0x69	; 105
 bc6:	39 f5       	brne	.+78     	; 0xc16 <vfprintf+0x23e>
 bc8:	f8 01       	movw	r30, r16
 bca:	37 fe       	sbrs	r3, 7
 bcc:	07 c0       	rjmp	.+14     	; 0xbdc <vfprintf+0x204>
 bce:	60 81       	ld	r22, Z
 bd0:	71 81       	ldd	r23, Z+1	; 0x01
 bd2:	82 81       	ldd	r24, Z+2	; 0x02
 bd4:	93 81       	ldd	r25, Z+3	; 0x03
 bd6:	0c 5f       	subi	r16, 0xFC	; 252
 bd8:	1f 4f       	sbci	r17, 0xFF	; 255
 bda:	08 c0       	rjmp	.+16     	; 0xbec <vfprintf+0x214>
 bdc:	60 81       	ld	r22, Z
 bde:	71 81       	ldd	r23, Z+1	; 0x01
 be0:	07 2e       	mov	r0, r23
 be2:	00 0c       	add	r0, r0
 be4:	88 0b       	sbc	r24, r24
 be6:	99 0b       	sbc	r25, r25
 be8:	0e 5f       	subi	r16, 0xFE	; 254
 bea:	1f 4f       	sbci	r17, 0xFF	; 255
 bec:	f3 2d       	mov	r31, r3
 bee:	ff 76       	andi	r31, 0x6F	; 111
 bf0:	3f 2e       	mov	r3, r31
 bf2:	97 ff       	sbrs	r25, 7
 bf4:	09 c0       	rjmp	.+18     	; 0xc08 <vfprintf+0x230>
 bf6:	90 95       	com	r25
 bf8:	80 95       	com	r24
 bfa:	70 95       	com	r23
 bfc:	61 95       	neg	r22
 bfe:	7f 4f       	sbci	r23, 0xFF	; 255
 c00:	8f 4f       	sbci	r24, 0xFF	; 255
 c02:	9f 4f       	sbci	r25, 0xFF	; 255
 c04:	f0 68       	ori	r31, 0x80	; 128
 c06:	3f 2e       	mov	r3, r31
 c08:	2a e0       	ldi	r18, 0x0A	; 10
 c0a:	30 e0       	ldi	r19, 0x00	; 0
 c0c:	a3 01       	movw	r20, r6
 c0e:	33 d1       	rcall	.+614    	; 0xe76 <__ultoa_invert>
 c10:	88 2e       	mov	r8, r24
 c12:	86 18       	sub	r8, r6
 c14:	44 c0       	rjmp	.+136    	; 0xc9e <vfprintf+0x2c6>
 c16:	85 37       	cpi	r24, 0x75	; 117
 c18:	31 f4       	brne	.+12     	; 0xc26 <vfprintf+0x24e>
 c1a:	23 2d       	mov	r18, r3
 c1c:	2f 7e       	andi	r18, 0xEF	; 239
 c1e:	b2 2e       	mov	r11, r18
 c20:	2a e0       	ldi	r18, 0x0A	; 10
 c22:	30 e0       	ldi	r19, 0x00	; 0
 c24:	25 c0       	rjmp	.+74     	; 0xc70 <vfprintf+0x298>
 c26:	93 2d       	mov	r25, r3
 c28:	99 7f       	andi	r25, 0xF9	; 249
 c2a:	b9 2e       	mov	r11, r25
 c2c:	8f 36       	cpi	r24, 0x6F	; 111
 c2e:	c1 f0       	breq	.+48     	; 0xc60 <vfprintf+0x288>
 c30:	18 f4       	brcc	.+6      	; 0xc38 <vfprintf+0x260>
 c32:	88 35       	cpi	r24, 0x58	; 88
 c34:	79 f0       	breq	.+30     	; 0xc54 <vfprintf+0x27c>
 c36:	ae c0       	rjmp	.+348    	; 0xd94 <vfprintf+0x3bc>
 c38:	80 37       	cpi	r24, 0x70	; 112
 c3a:	19 f0       	breq	.+6      	; 0xc42 <vfprintf+0x26a>
 c3c:	88 37       	cpi	r24, 0x78	; 120
 c3e:	21 f0       	breq	.+8      	; 0xc48 <vfprintf+0x270>
 c40:	a9 c0       	rjmp	.+338    	; 0xd94 <vfprintf+0x3bc>
 c42:	e9 2f       	mov	r30, r25
 c44:	e0 61       	ori	r30, 0x10	; 16
 c46:	be 2e       	mov	r11, r30
 c48:	b4 fe       	sbrs	r11, 4
 c4a:	0d c0       	rjmp	.+26     	; 0xc66 <vfprintf+0x28e>
 c4c:	fb 2d       	mov	r31, r11
 c4e:	f4 60       	ori	r31, 0x04	; 4
 c50:	bf 2e       	mov	r11, r31
 c52:	09 c0       	rjmp	.+18     	; 0xc66 <vfprintf+0x28e>
 c54:	34 fe       	sbrs	r3, 4
 c56:	0a c0       	rjmp	.+20     	; 0xc6c <vfprintf+0x294>
 c58:	29 2f       	mov	r18, r25
 c5a:	26 60       	ori	r18, 0x06	; 6
 c5c:	b2 2e       	mov	r11, r18
 c5e:	06 c0       	rjmp	.+12     	; 0xc6c <vfprintf+0x294>
 c60:	28 e0       	ldi	r18, 0x08	; 8
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	05 c0       	rjmp	.+10     	; 0xc70 <vfprintf+0x298>
 c66:	20 e1       	ldi	r18, 0x10	; 16
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	02 c0       	rjmp	.+4      	; 0xc70 <vfprintf+0x298>
 c6c:	20 e1       	ldi	r18, 0x10	; 16
 c6e:	32 e0       	ldi	r19, 0x02	; 2
 c70:	f8 01       	movw	r30, r16
 c72:	b7 fe       	sbrs	r11, 7
 c74:	07 c0       	rjmp	.+14     	; 0xc84 <vfprintf+0x2ac>
 c76:	60 81       	ld	r22, Z
 c78:	71 81       	ldd	r23, Z+1	; 0x01
 c7a:	82 81       	ldd	r24, Z+2	; 0x02
 c7c:	93 81       	ldd	r25, Z+3	; 0x03
 c7e:	0c 5f       	subi	r16, 0xFC	; 252
 c80:	1f 4f       	sbci	r17, 0xFF	; 255
 c82:	06 c0       	rjmp	.+12     	; 0xc90 <vfprintf+0x2b8>
 c84:	60 81       	ld	r22, Z
 c86:	71 81       	ldd	r23, Z+1	; 0x01
 c88:	80 e0       	ldi	r24, 0x00	; 0
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	0e 5f       	subi	r16, 0xFE	; 254
 c8e:	1f 4f       	sbci	r17, 0xFF	; 255
 c90:	a3 01       	movw	r20, r6
 c92:	f1 d0       	rcall	.+482    	; 0xe76 <__ultoa_invert>
 c94:	88 2e       	mov	r8, r24
 c96:	86 18       	sub	r8, r6
 c98:	fb 2d       	mov	r31, r11
 c9a:	ff 77       	andi	r31, 0x7F	; 127
 c9c:	3f 2e       	mov	r3, r31
 c9e:	36 fe       	sbrs	r3, 6
 ca0:	0d c0       	rjmp	.+26     	; 0xcbc <vfprintf+0x2e4>
 ca2:	23 2d       	mov	r18, r3
 ca4:	2e 7f       	andi	r18, 0xFE	; 254
 ca6:	a2 2e       	mov	r10, r18
 ca8:	89 14       	cp	r8, r9
 caa:	58 f4       	brcc	.+22     	; 0xcc2 <vfprintf+0x2ea>
 cac:	34 fe       	sbrs	r3, 4
 cae:	0b c0       	rjmp	.+22     	; 0xcc6 <vfprintf+0x2ee>
 cb0:	32 fc       	sbrc	r3, 2
 cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <vfprintf+0x2ee>
 cb4:	83 2d       	mov	r24, r3
 cb6:	8e 7e       	andi	r24, 0xEE	; 238
 cb8:	a8 2e       	mov	r10, r24
 cba:	05 c0       	rjmp	.+10     	; 0xcc6 <vfprintf+0x2ee>
 cbc:	b8 2c       	mov	r11, r8
 cbe:	a3 2c       	mov	r10, r3
 cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <vfprintf+0x2f0>
 cc2:	b8 2c       	mov	r11, r8
 cc4:	01 c0       	rjmp	.+2      	; 0xcc8 <vfprintf+0x2f0>
 cc6:	b9 2c       	mov	r11, r9
 cc8:	a4 fe       	sbrs	r10, 4
 cca:	0f c0       	rjmp	.+30     	; 0xcea <vfprintf+0x312>
 ccc:	fe 01       	movw	r30, r28
 cce:	e8 0d       	add	r30, r8
 cd0:	f1 1d       	adc	r31, r1
 cd2:	80 81       	ld	r24, Z
 cd4:	80 33       	cpi	r24, 0x30	; 48
 cd6:	21 f4       	brne	.+8      	; 0xce0 <vfprintf+0x308>
 cd8:	9a 2d       	mov	r25, r10
 cda:	99 7e       	andi	r25, 0xE9	; 233
 cdc:	a9 2e       	mov	r10, r25
 cde:	09 c0       	rjmp	.+18     	; 0xcf2 <vfprintf+0x31a>
 ce0:	a2 fe       	sbrs	r10, 2
 ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <vfprintf+0x318>
 ce4:	b3 94       	inc	r11
 ce6:	b3 94       	inc	r11
 ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <vfprintf+0x31a>
 cea:	8a 2d       	mov	r24, r10
 cec:	86 78       	andi	r24, 0x86	; 134
 cee:	09 f0       	breq	.+2      	; 0xcf2 <vfprintf+0x31a>
 cf0:	b3 94       	inc	r11
 cf2:	a3 fc       	sbrc	r10, 3
 cf4:	10 c0       	rjmp	.+32     	; 0xd16 <vfprintf+0x33e>
 cf6:	a0 fe       	sbrs	r10, 0
 cf8:	06 c0       	rjmp	.+12     	; 0xd06 <vfprintf+0x32e>
 cfa:	b2 14       	cp	r11, r2
 cfc:	80 f4       	brcc	.+32     	; 0xd1e <vfprintf+0x346>
 cfe:	28 0c       	add	r2, r8
 d00:	92 2c       	mov	r9, r2
 d02:	9b 18       	sub	r9, r11
 d04:	0d c0       	rjmp	.+26     	; 0xd20 <vfprintf+0x348>
 d06:	b2 14       	cp	r11, r2
 d08:	58 f4       	brcc	.+22     	; 0xd20 <vfprintf+0x348>
 d0a:	b6 01       	movw	r22, r12
 d0c:	80 e2       	ldi	r24, 0x20	; 32
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	76 d0       	rcall	.+236    	; 0xdfe <fputc>
 d12:	b3 94       	inc	r11
 d14:	f8 cf       	rjmp	.-16     	; 0xd06 <vfprintf+0x32e>
 d16:	b2 14       	cp	r11, r2
 d18:	18 f4       	brcc	.+6      	; 0xd20 <vfprintf+0x348>
 d1a:	2b 18       	sub	r2, r11
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0x34a>
 d1e:	98 2c       	mov	r9, r8
 d20:	21 2c       	mov	r2, r1
 d22:	a4 fe       	sbrs	r10, 4
 d24:	0f c0       	rjmp	.+30     	; 0xd44 <vfprintf+0x36c>
 d26:	b6 01       	movw	r22, r12
 d28:	80 e3       	ldi	r24, 0x30	; 48
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	68 d0       	rcall	.+208    	; 0xdfe <fputc>
 d2e:	a2 fe       	sbrs	r10, 2
 d30:	16 c0       	rjmp	.+44     	; 0xd5e <vfprintf+0x386>
 d32:	a1 fc       	sbrc	r10, 1
 d34:	03 c0       	rjmp	.+6      	; 0xd3c <vfprintf+0x364>
 d36:	88 e7       	ldi	r24, 0x78	; 120
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	02 c0       	rjmp	.+4      	; 0xd40 <vfprintf+0x368>
 d3c:	88 e5       	ldi	r24, 0x58	; 88
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	b6 01       	movw	r22, r12
 d42:	0c c0       	rjmp	.+24     	; 0xd5c <vfprintf+0x384>
 d44:	8a 2d       	mov	r24, r10
 d46:	86 78       	andi	r24, 0x86	; 134
 d48:	51 f0       	breq	.+20     	; 0xd5e <vfprintf+0x386>
 d4a:	a1 fe       	sbrs	r10, 1
 d4c:	02 c0       	rjmp	.+4      	; 0xd52 <vfprintf+0x37a>
 d4e:	8b e2       	ldi	r24, 0x2B	; 43
 d50:	01 c0       	rjmp	.+2      	; 0xd54 <vfprintf+0x37c>
 d52:	80 e2       	ldi	r24, 0x20	; 32
 d54:	a7 fc       	sbrc	r10, 7
 d56:	8d e2       	ldi	r24, 0x2D	; 45
 d58:	b6 01       	movw	r22, r12
 d5a:	90 e0       	ldi	r25, 0x00	; 0
 d5c:	50 d0       	rcall	.+160    	; 0xdfe <fputc>
 d5e:	89 14       	cp	r8, r9
 d60:	30 f4       	brcc	.+12     	; 0xd6e <vfprintf+0x396>
 d62:	b6 01       	movw	r22, r12
 d64:	80 e3       	ldi	r24, 0x30	; 48
 d66:	90 e0       	ldi	r25, 0x00	; 0
 d68:	4a d0       	rcall	.+148    	; 0xdfe <fputc>
 d6a:	9a 94       	dec	r9
 d6c:	f8 cf       	rjmp	.-16     	; 0xd5e <vfprintf+0x386>
 d6e:	8a 94       	dec	r8
 d70:	f3 01       	movw	r30, r6
 d72:	e8 0d       	add	r30, r8
 d74:	f1 1d       	adc	r31, r1
 d76:	80 81       	ld	r24, Z
 d78:	b6 01       	movw	r22, r12
 d7a:	90 e0       	ldi	r25, 0x00	; 0
 d7c:	40 d0       	rcall	.+128    	; 0xdfe <fputc>
 d7e:	81 10       	cpse	r8, r1
 d80:	f6 cf       	rjmp	.-20     	; 0xd6e <vfprintf+0x396>
 d82:	22 20       	and	r2, r2
 d84:	09 f4       	brne	.+2      	; 0xd88 <vfprintf+0x3b0>
 d86:	4e ce       	rjmp	.-868    	; 0xa24 <vfprintf+0x4c>
 d88:	b6 01       	movw	r22, r12
 d8a:	80 e2       	ldi	r24, 0x20	; 32
 d8c:	90 e0       	ldi	r25, 0x00	; 0
 d8e:	37 d0       	rcall	.+110    	; 0xdfe <fputc>
 d90:	2a 94       	dec	r2
 d92:	f7 cf       	rjmp	.-18     	; 0xd82 <vfprintf+0x3aa>
 d94:	f6 01       	movw	r30, r12
 d96:	86 81       	ldd	r24, Z+6	; 0x06
 d98:	97 81       	ldd	r25, Z+7	; 0x07
 d9a:	02 c0       	rjmp	.+4      	; 0xda0 <vfprintf+0x3c8>
 d9c:	8f ef       	ldi	r24, 0xFF	; 255
 d9e:	9f ef       	ldi	r25, 0xFF	; 255
 da0:	2b 96       	adiw	r28, 0x0b	; 11
 da2:	0f b6       	in	r0, 0x3f	; 63
 da4:	f8 94       	cli
 da6:	de bf       	out	0x3e, r29	; 62
 da8:	0f be       	out	0x3f, r0	; 63
 daa:	cd bf       	out	0x3d, r28	; 61
 dac:	df 91       	pop	r29
 dae:	cf 91       	pop	r28
 db0:	1f 91       	pop	r17
 db2:	0f 91       	pop	r16
 db4:	ff 90       	pop	r15
 db6:	ef 90       	pop	r14
 db8:	df 90       	pop	r13
 dba:	cf 90       	pop	r12
 dbc:	bf 90       	pop	r11
 dbe:	af 90       	pop	r10
 dc0:	9f 90       	pop	r9
 dc2:	8f 90       	pop	r8
 dc4:	7f 90       	pop	r7
 dc6:	6f 90       	pop	r6
 dc8:	5f 90       	pop	r5
 dca:	4f 90       	pop	r4
 dcc:	3f 90       	pop	r3
 dce:	2f 90       	pop	r2
 dd0:	08 95       	ret

00000dd2 <strnlen_P>:
 dd2:	fc 01       	movw	r30, r24
 dd4:	05 90       	lpm	r0, Z+
 dd6:	61 50       	subi	r22, 0x01	; 1
 dd8:	70 40       	sbci	r23, 0x00	; 0
 dda:	01 10       	cpse	r0, r1
 ddc:	d8 f7       	brcc	.-10     	; 0xdd4 <strnlen_P+0x2>
 dde:	80 95       	com	r24
 de0:	90 95       	com	r25
 de2:	8e 0f       	add	r24, r30
 de4:	9f 1f       	adc	r25, r31
 de6:	08 95       	ret

00000de8 <strnlen>:
 de8:	fc 01       	movw	r30, r24
 dea:	61 50       	subi	r22, 0x01	; 1
 dec:	70 40       	sbci	r23, 0x00	; 0
 dee:	01 90       	ld	r0, Z+
 df0:	01 10       	cpse	r0, r1
 df2:	d8 f7       	brcc	.-10     	; 0xdea <strnlen+0x2>
 df4:	80 95       	com	r24
 df6:	90 95       	com	r25
 df8:	8e 0f       	add	r24, r30
 dfa:	9f 1f       	adc	r25, r31
 dfc:	08 95       	ret

00000dfe <fputc>:
 dfe:	0f 93       	push	r16
 e00:	1f 93       	push	r17
 e02:	cf 93       	push	r28
 e04:	df 93       	push	r29
 e06:	fb 01       	movw	r30, r22
 e08:	23 81       	ldd	r18, Z+3	; 0x03
 e0a:	21 fd       	sbrc	r18, 1
 e0c:	03 c0       	rjmp	.+6      	; 0xe14 <fputc+0x16>
 e0e:	8f ef       	ldi	r24, 0xFF	; 255
 e10:	9f ef       	ldi	r25, 0xFF	; 255
 e12:	2c c0       	rjmp	.+88     	; 0xe6c <fputc+0x6e>
 e14:	22 ff       	sbrs	r18, 2
 e16:	16 c0       	rjmp	.+44     	; 0xe44 <fputc+0x46>
 e18:	46 81       	ldd	r20, Z+6	; 0x06
 e1a:	57 81       	ldd	r21, Z+7	; 0x07
 e1c:	24 81       	ldd	r18, Z+4	; 0x04
 e1e:	35 81       	ldd	r19, Z+5	; 0x05
 e20:	42 17       	cp	r20, r18
 e22:	53 07       	cpc	r21, r19
 e24:	44 f4       	brge	.+16     	; 0xe36 <fputc+0x38>
 e26:	a0 81       	ld	r26, Z
 e28:	b1 81       	ldd	r27, Z+1	; 0x01
 e2a:	9d 01       	movw	r18, r26
 e2c:	2f 5f       	subi	r18, 0xFF	; 255
 e2e:	3f 4f       	sbci	r19, 0xFF	; 255
 e30:	31 83       	std	Z+1, r19	; 0x01
 e32:	20 83       	st	Z, r18
 e34:	8c 93       	st	X, r24
 e36:	26 81       	ldd	r18, Z+6	; 0x06
 e38:	37 81       	ldd	r19, Z+7	; 0x07
 e3a:	2f 5f       	subi	r18, 0xFF	; 255
 e3c:	3f 4f       	sbci	r19, 0xFF	; 255
 e3e:	37 83       	std	Z+7, r19	; 0x07
 e40:	26 83       	std	Z+6, r18	; 0x06
 e42:	14 c0       	rjmp	.+40     	; 0xe6c <fputc+0x6e>
 e44:	8b 01       	movw	r16, r22
 e46:	ec 01       	movw	r28, r24
 e48:	fb 01       	movw	r30, r22
 e4a:	00 84       	ldd	r0, Z+8	; 0x08
 e4c:	f1 85       	ldd	r31, Z+9	; 0x09
 e4e:	e0 2d       	mov	r30, r0
 e50:	09 95       	icall
 e52:	89 2b       	or	r24, r25
 e54:	e1 f6       	brne	.-72     	; 0xe0e <fputc+0x10>
 e56:	d8 01       	movw	r26, r16
 e58:	16 96       	adiw	r26, 0x06	; 6
 e5a:	8d 91       	ld	r24, X+
 e5c:	9c 91       	ld	r25, X
 e5e:	17 97       	sbiw	r26, 0x07	; 7
 e60:	01 96       	adiw	r24, 0x01	; 1
 e62:	17 96       	adiw	r26, 0x07	; 7
 e64:	9c 93       	st	X, r25
 e66:	8e 93       	st	-X, r24
 e68:	16 97       	sbiw	r26, 0x06	; 6
 e6a:	ce 01       	movw	r24, r28
 e6c:	df 91       	pop	r29
 e6e:	cf 91       	pop	r28
 e70:	1f 91       	pop	r17
 e72:	0f 91       	pop	r16
 e74:	08 95       	ret

00000e76 <__ultoa_invert>:
 e76:	fa 01       	movw	r30, r20
 e78:	aa 27       	eor	r26, r26
 e7a:	28 30       	cpi	r18, 0x08	; 8
 e7c:	51 f1       	breq	.+84     	; 0xed2 <__ultoa_invert+0x5c>
 e7e:	20 31       	cpi	r18, 0x10	; 16
 e80:	81 f1       	breq	.+96     	; 0xee2 <__ultoa_invert+0x6c>
 e82:	e8 94       	clt
 e84:	6f 93       	push	r22
 e86:	6e 7f       	andi	r22, 0xFE	; 254
 e88:	6e 5f       	subi	r22, 0xFE	; 254
 e8a:	7f 4f       	sbci	r23, 0xFF	; 255
 e8c:	8f 4f       	sbci	r24, 0xFF	; 255
 e8e:	9f 4f       	sbci	r25, 0xFF	; 255
 e90:	af 4f       	sbci	r26, 0xFF	; 255
 e92:	b1 e0       	ldi	r27, 0x01	; 1
 e94:	3e d0       	rcall	.+124    	; 0xf12 <__ultoa_invert+0x9c>
 e96:	b4 e0       	ldi	r27, 0x04	; 4
 e98:	3c d0       	rcall	.+120    	; 0xf12 <__ultoa_invert+0x9c>
 e9a:	67 0f       	add	r22, r23
 e9c:	78 1f       	adc	r23, r24
 e9e:	89 1f       	adc	r24, r25
 ea0:	9a 1f       	adc	r25, r26
 ea2:	a1 1d       	adc	r26, r1
 ea4:	68 0f       	add	r22, r24
 ea6:	79 1f       	adc	r23, r25
 ea8:	8a 1f       	adc	r24, r26
 eaa:	91 1d       	adc	r25, r1
 eac:	a1 1d       	adc	r26, r1
 eae:	6a 0f       	add	r22, r26
 eb0:	71 1d       	adc	r23, r1
 eb2:	81 1d       	adc	r24, r1
 eb4:	91 1d       	adc	r25, r1
 eb6:	a1 1d       	adc	r26, r1
 eb8:	20 d0       	rcall	.+64     	; 0xefa <__ultoa_invert+0x84>
 eba:	09 f4       	brne	.+2      	; 0xebe <__ultoa_invert+0x48>
 ebc:	68 94       	set
 ebe:	3f 91       	pop	r19
 ec0:	2a e0       	ldi	r18, 0x0A	; 10
 ec2:	26 9f       	mul	r18, r22
 ec4:	11 24       	eor	r1, r1
 ec6:	30 19       	sub	r19, r0
 ec8:	30 5d       	subi	r19, 0xD0	; 208
 eca:	31 93       	st	Z+, r19
 ecc:	de f6       	brtc	.-74     	; 0xe84 <__ultoa_invert+0xe>
 ece:	cf 01       	movw	r24, r30
 ed0:	08 95       	ret
 ed2:	46 2f       	mov	r20, r22
 ed4:	47 70       	andi	r20, 0x07	; 7
 ed6:	40 5d       	subi	r20, 0xD0	; 208
 ed8:	41 93       	st	Z+, r20
 eda:	b3 e0       	ldi	r27, 0x03	; 3
 edc:	0f d0       	rcall	.+30     	; 0xefc <__ultoa_invert+0x86>
 ede:	c9 f7       	brne	.-14     	; 0xed2 <__ultoa_invert+0x5c>
 ee0:	f6 cf       	rjmp	.-20     	; 0xece <__ultoa_invert+0x58>
 ee2:	46 2f       	mov	r20, r22
 ee4:	4f 70       	andi	r20, 0x0F	; 15
 ee6:	40 5d       	subi	r20, 0xD0	; 208
 ee8:	4a 33       	cpi	r20, 0x3A	; 58
 eea:	18 f0       	brcs	.+6      	; 0xef2 <__ultoa_invert+0x7c>
 eec:	49 5d       	subi	r20, 0xD9	; 217
 eee:	31 fd       	sbrc	r19, 1
 ef0:	40 52       	subi	r20, 0x20	; 32
 ef2:	41 93       	st	Z+, r20
 ef4:	02 d0       	rcall	.+4      	; 0xefa <__ultoa_invert+0x84>
 ef6:	a9 f7       	brne	.-22     	; 0xee2 <__ultoa_invert+0x6c>
 ef8:	ea cf       	rjmp	.-44     	; 0xece <__ultoa_invert+0x58>
 efa:	b4 e0       	ldi	r27, 0x04	; 4
 efc:	a6 95       	lsr	r26
 efe:	97 95       	ror	r25
 f00:	87 95       	ror	r24
 f02:	77 95       	ror	r23
 f04:	67 95       	ror	r22
 f06:	ba 95       	dec	r27
 f08:	c9 f7       	brne	.-14     	; 0xefc <__ultoa_invert+0x86>
 f0a:	00 97       	sbiw	r24, 0x00	; 0
 f0c:	61 05       	cpc	r22, r1
 f0e:	71 05       	cpc	r23, r1
 f10:	08 95       	ret
 f12:	9b 01       	movw	r18, r22
 f14:	ac 01       	movw	r20, r24
 f16:	0a 2e       	mov	r0, r26
 f18:	06 94       	lsr	r0
 f1a:	57 95       	ror	r21
 f1c:	47 95       	ror	r20
 f1e:	37 95       	ror	r19
 f20:	27 95       	ror	r18
 f22:	ba 95       	dec	r27
 f24:	c9 f7       	brne	.-14     	; 0xf18 <__ultoa_invert+0xa2>
 f26:	62 0f       	add	r22, r18
 f28:	73 1f       	adc	r23, r19
 f2a:	84 1f       	adc	r24, r20
 f2c:	95 1f       	adc	r25, r21
 f2e:	a0 1d       	adc	r26, r0
 f30:	08 95       	ret

00000f32 <_exit>:
 f32:	f8 94       	cli

00000f34 <__stop_program>:
 f34:	ff cf       	rjmp	.-2      	; 0xf34 <__stop_program>
